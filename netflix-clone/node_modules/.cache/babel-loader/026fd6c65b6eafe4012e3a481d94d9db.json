{"ast":null,"code":"`use strict`;\n\nconst http = require('http');\n\nconst https = require('https');\n\nconst url = require('url');\n\nconst debug = require(\"debug\")(\"universal-analytics\");\n\nfunction getProtocol(path) {\n  return url.parse(path).protocol === \"http:\" ? http : https;\n}\n/**\n * Send a post request\n * @param path is the url endpoint\n * @param headers of the request\n * @param callback contains (error, body, status, headers)\n * @param data a JSON Object or a string\n */\n\n\nfunction post(path, data, headers, callback) {\n  request(path, \"POST\", data, headers, callback);\n}\n/**\n * Send a custom request\n * @param path is the url endpoint\n * @param headers of the request\n * @param callback contains (error, statusCode, data)\n * @param data a JSON Object or a string\n * @param method is the protocol used like POST GET DELETE PUT etc...\n */\n\n\nfunction request(path, method, body) {\n  let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  let callback = arguments.length > 4 ? arguments[4] : undefined;\n  const {\n    hostname,\n    port,\n    pathname\n  } = url.parse(path);\n  const options = {\n    hostname,\n    port,\n    path: pathname,\n    method,\n    headers\n  };\n  const req = getProtocol(path).request(options, function (response) {\n    handleResponse(response, callback);\n  });\n  req.on('error', function (error) {\n    callback(error);\n    debug('Request error', error);\n  });\n  req.write(body);\n  req.end();\n}\n\nfunction handleResponse(response, callback) {\n  let body = '';\n  const {\n    headers,\n    statusCode\n  } = response;\n  const hasError = statusCode >= 300;\n  response.setEncoding('utf8');\n  response.on('data', function (data) {\n    body += data;\n  });\n  response.on('end', function () {\n    callback(hasError ? body : null, hasError ? null : body, statusCode, headers);\n  });\n}\n\nmodule.exports = {\n  post\n};","map":{"version":3,"sources":["C:/Users/DELL/OneDrive/Desktop/React/netflix-clone/node_modules/firebase-tools/node_modules/universal-analytics/lib/request.js"],"names":["http","require","https","url","debug","getProtocol","path","parse","protocol","post","data","headers","callback","request","method","body","hostname","port","pathname","options","req","response","handleResponse","on","error","write","end","statusCode","hasError","setEncoding","module","exports"],"mappings":"AAAC,YAAD;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAAP,CAAiB,qBAAjB,CAAd;;AAEA,SAASI,WAAT,CAAqBC,IAArB,EAA2B;AACzB,SAAOH,GAAG,CAACI,KAAJ,CAAUD,IAAV,EAAgBE,QAAhB,KAA6B,OAA7B,GAAuCR,IAAvC,GAA8CE,KAArD;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,IAAT,CAAcH,IAAd,EAAoBI,IAApB,EAA0BC,OAA1B,EAAmCC,QAAnC,EAA6C;AAC3CC,EAAAA,OAAO,CAACP,IAAD,EAAO,MAAP,EAAeI,IAAf,EAAqBC,OAArB,EAA8BC,QAA9B,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiBP,IAAjB,EAAuBQ,MAAvB,EAA+BC,IAA/B,EAA6D;AAAA,MAAxBJ,OAAwB,uEAAd,EAAc;AAAA,MAAVC,QAAU;AAC3D,QAAM;AAAEI,IAAAA,QAAF;AAAYC,IAAAA,IAAZ;AAAkBC,IAAAA;AAAlB,MAA+Bf,GAAG,CAACI,KAAJ,CAAUD,IAAV,CAArC;AACA,QAAMa,OAAO,GAAG;AACdH,IAAAA,QADc;AAEdC,IAAAA,IAFc;AAGdX,IAAAA,IAAI,EAAEY,QAHQ;AAIdJ,IAAAA,MAJc;AAKdH,IAAAA;AALc,GAAhB;AAQA,QAAMS,GAAG,GAAGf,WAAW,CAACC,IAAD,CAAX,CAAkBO,OAAlB,CAA0BM,OAA1B,EAAmC,UAAUE,QAAV,EAAoB;AACjEC,IAAAA,cAAc,CAACD,QAAD,EAAWT,QAAX,CAAd;AACD,GAFW,CAAZ;AAIAQ,EAAAA,GAAG,CAACG,EAAJ,CAAO,OAAP,EAAgB,UAAUC,KAAV,EAAiB;AAC/BZ,IAAAA,QAAQ,CAACY,KAAD,CAAR;AACApB,IAAAA,KAAK,CAAC,eAAD,EAAkBoB,KAAlB,CAAL;AACD,GAHD;AAKAJ,EAAAA,GAAG,CAACK,KAAJ,CAAUV,IAAV;AAEAK,EAAAA,GAAG,CAACM,GAAJ;AACD;;AAED,SAASJ,cAAT,CAAwBD,QAAxB,EAAkCT,QAAlC,EAA4C;AAC1C,MAAIG,IAAI,GAAG,EAAX;AACA,QAAM;AAAEJ,IAAAA,OAAF;AAAWgB,IAAAA;AAAX,MAA0BN,QAAhC;AACA,QAAMO,QAAQ,GAAGD,UAAU,IAAI,GAA/B;AAEAN,EAAAA,QAAQ,CAACQ,WAAT,CAAqB,MAArB;AAEAR,EAAAA,QAAQ,CAACE,EAAT,CAAY,MAAZ,EAAoB,UAAUb,IAAV,EAAgB;AAClCK,IAAAA,IAAI,IAAIL,IAAR;AACD,GAFD;AAIAW,EAAAA,QAAQ,CAACE,EAAT,CAAY,KAAZ,EAAmB,YAAY;AAC7BX,IAAAA,QAAQ,CAACgB,QAAQ,GAAGb,IAAH,GAAU,IAAnB,EAAyBa,QAAQ,GAAG,IAAH,GAAUb,IAA3C,EAAiDY,UAAjD,EAA6DhB,OAA7D,CAAR;AACD,GAFD;AAGD;;AAEDmB,MAAM,CAACC,OAAP,GAAiB;AACftB,EAAAA;AADe,CAAjB","sourcesContent":["`use strict`\n\nconst http = require('http');\nconst https = require('https');\nconst url = require('url');\nconst debug = require(\"debug\")(\"universal-analytics\");\n\nfunction getProtocol(path) {\n  return url.parse(path).protocol === \"http:\" ? http : https;\n}\n\n/**\n * Send a post request\n * @param path is the url endpoint\n * @param headers of the request\n * @param callback contains (error, body, status, headers)\n * @param data a JSON Object or a string\n */\nfunction post(path, data, headers, callback) {\n  request(path, \"POST\", data, headers, callback);\n}\n\n/**\n * Send a custom request\n * @param path is the url endpoint\n * @param headers of the request\n * @param callback contains (error, statusCode, data)\n * @param data a JSON Object or a string\n * @param method is the protocol used like POST GET DELETE PUT etc...\n */\nfunction request(path, method, body, headers = {}, callback) {\n  const { hostname, port, pathname } = url.parse(path);\n  const options = {\n    hostname,\n    port,\n    path: pathname,\n    method,\n    headers\n  };\n\n  const req = getProtocol(path).request(options, function (response) {\n    handleResponse(response, callback);\n  });\n\n  req.on('error', function (error) {\n    callback(error);\n    debug('Request error', error);\n  });\n\n  req.write(body);\n\n  req.end();\n}\n\nfunction handleResponse(response, callback) {\n  let body = '';\n  const { headers, statusCode } = response\n  const hasError = statusCode >= 300;\n\n  response.setEncoding('utf8');\n\n  response.on('data', function (data) {\n    body += data;\n  });\n\n  response.on('end', function () {\n    callback(hasError ? body : null, hasError ? null : body, statusCode, headers);\n  });\n}\n\nmodule.exports = {\n  post\n};\n"]},"metadata":{},"sourceType":"script"}