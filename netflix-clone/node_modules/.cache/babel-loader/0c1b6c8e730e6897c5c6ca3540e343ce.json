{"ast":null,"code":"'use strict';\n/**\n * `list` type prompt\n */\n\nconst _ = {\n  isArray: require('lodash/isArray'),\n  map: require('lodash/map'),\n  isString: require('lodash/isString')\n};\n\nconst chalk = require('chalk');\n\nconst cliCursor = require('cli-cursor');\n\nconst figures = require('figures');\n\nconst {\n  map,\n  takeUntil\n} = require('rxjs/operators');\n\nconst Base = require('./base');\n\nconst observe = require('../utils/events');\n\nconst Paginator = require('../utils/paginator');\n\nconst incrementListIndex = require('../utils/incrementListIndex');\n\nclass CheckboxPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    if (!this.opt.choices) {\n      this.throwParamError('choices');\n    }\n\n    if (_.isArray(this.opt.default)) {\n      this.opt.choices.forEach(function (choice) {\n        if (this.opt.default.indexOf(choice.value) >= 0) {\n          choice.checked = true;\n        }\n      }, this);\n    }\n\n    this.pointer = 0; // Make sure no default is set (so it won't be printed)\n\n    this.opt.default = null;\n    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;\n    this.paginator = new Paginator(this.screen, {\n      isInfinite: shouldLoop\n    });\n  }\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n\n  _run(cb) {\n    this.done = cb;\n    const events = observe(this.rl);\n    const validation = this.handleSubmitEvents(events.line.pipe(map(this.getCurrentValue.bind(this))));\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n    events.normalizedUpKey.pipe(takeUntil(validation.success)).forEach(this.onUpKey.bind(this));\n    events.normalizedDownKey.pipe(takeUntil(validation.success)).forEach(this.onDownKey.bind(this));\n    events.numberKey.pipe(takeUntil(validation.success)).forEach(this.onNumberKey.bind(this));\n    events.spaceKey.pipe(takeUntil(validation.success)).forEach(this.onSpaceKey.bind(this));\n    events.aKey.pipe(takeUntil(validation.success)).forEach(this.onAllKey.bind(this));\n    events.iKey.pipe(takeUntil(validation.success)).forEach(this.onInverseKey.bind(this)); // Init the prompt\n\n    cliCursor.hide();\n    this.render();\n    this.firstRender = false;\n    return this;\n  }\n  /**\n   * Render the prompt to screen\n   * @return {CheckboxPrompt} self\n   */\n\n\n  render(error) {\n    // Render question\n    let message = this.getQuestion();\n    let bottomContent = '';\n\n    if (!this.dontShowHints) {\n      message += '(Press ' + chalk.cyan.bold('<space>') + ' to select, ' + chalk.cyan.bold('<a>') + ' to toggle all, ' + chalk.cyan.bold('<i>') + ' to invert selection, and ' + chalk.cyan.bold('<enter>') + ' to proceed)';\n    } // Render choices or answer depending on the state\n\n\n    if (this.status === 'answered') {\n      message += chalk.cyan(this.selection.join(', '));\n    } else {\n      const choicesStr = renderChoices(this.opt.choices, this.pointer);\n      const indexPosition = this.opt.choices.indexOf(this.opt.choices.getChoice(this.pointer));\n      const realIndexPosition = this.opt.choices.reduce((acc, value, i) => {\n        // Dont count lines past the choice we are looking at\n        if (i > indexPosition) {\n          return acc;\n        } // Add line if it's a separator\n\n\n        if (value.type === 'separator') {\n          return acc + 1;\n        }\n\n        let l = value.name; // Non-strings take up one line\n\n        if (typeof l !== 'string') {\n          return acc + 1;\n        } // Calculate lines taken up by string\n\n\n        l = l.split('\\n');\n        return acc + l.length;\n      }, 0) - 1;\n      message += '\\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);\n    }\n\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n  /**\n   * When user press `enter` key\n   */\n\n\n  onEnd(state) {\n    this.status = 'answered';\n    this.dontShowHints = true; // Rerender prompt (and clean subline error)\n\n    this.render();\n    this.screen.done();\n    cliCursor.show();\n    this.done(state.value);\n  }\n\n  onError(state) {\n    this.render(state.isValid);\n  }\n\n  getCurrentValue() {\n    const choices = this.opt.choices.filter(choice => Boolean(choice.checked) && !choice.disabled);\n    this.selection = _.map(choices, 'short');\n    return _.map(choices, 'value');\n  }\n\n  onUpKey() {\n    this.pointer = incrementListIndex(this.pointer, 'up', this.opt);\n    this.render();\n  }\n\n  onDownKey() {\n    this.pointer = incrementListIndex(this.pointer, 'down', this.opt);\n    this.render();\n  }\n\n  onNumberKey(input) {\n    if (input <= this.opt.choices.realLength) {\n      this.pointer = input - 1;\n      this.toggleChoice(this.pointer);\n    }\n\n    this.render();\n  }\n\n  onSpaceKey() {\n    this.toggleChoice(this.pointer);\n    this.render();\n  }\n\n  onAllKey() {\n    const shouldBeChecked = Boolean(this.opt.choices.find(choice => choice.type !== 'separator' && !choice.checked));\n    this.opt.choices.forEach(choice => {\n      if (choice.type !== 'separator') {\n        choice.checked = shouldBeChecked;\n      }\n    });\n    this.render();\n  }\n\n  onInverseKey() {\n    this.opt.choices.forEach(choice => {\n      if (choice.type !== 'separator') {\n        choice.checked = !choice.checked;\n      }\n    });\n    this.render();\n  }\n\n  toggleChoice(index) {\n    const item = this.opt.choices.getChoice(index);\n\n    if (item !== undefined) {\n      this.opt.choices.getChoice(index).checked = !item.checked;\n    }\n  }\n\n}\n/**\n * Function for rendering checkbox choices\n * @param  {Number} pointer Position of the pointer\n * @return {String}         Rendered content\n */\n\n\nfunction renderChoices(choices, pointer) {\n  let output = '';\n  let separatorOffset = 0;\n  choices.forEach((choice, i) => {\n    if (choice.type === 'separator') {\n      separatorOffset++;\n      output += ' ' + choice + '\\n';\n      return;\n    }\n\n    if (choice.disabled) {\n      separatorOffset++;\n      output += ' - ' + choice.name;\n      output += ' (' + (_.isString(choice.disabled) ? choice.disabled : 'Disabled') + ')';\n    } else {\n      const line = getCheckbox(choice.checked) + ' ' + choice.name;\n\n      if (i - separatorOffset === pointer) {\n        output += chalk.cyan(figures.pointer + line);\n      } else {\n        output += ' ' + line;\n      }\n    }\n\n    output += '\\n';\n  });\n  return output.replace(/\\n$/, '');\n}\n/**\n * Get the checkbox\n * @param  {Boolean} checked - add a X or not to the checkbox\n * @return {String} Composited checkbox string\n */\n\n\nfunction getCheckbox(checked) {\n  return checked ? chalk.green(figures.radioOn) : figures.radioOff;\n}\n\nmodule.exports = CheckboxPrompt;","map":{"version":3,"sources":["C:/Users/DELL/OneDrive/Desktop/React/netflix-clone/node_modules/firebase-tools/node_modules/inquirer/lib/prompts/checkbox.js"],"names":["_","isArray","require","map","isString","chalk","cliCursor","figures","takeUntil","Base","observe","Paginator","incrementListIndex","CheckboxPrompt","constructor","questions","rl","answers","opt","choices","throwParamError","default","forEach","choice","indexOf","value","checked","pointer","shouldLoop","loop","undefined","paginator","screen","isInfinite","_run","cb","done","events","validation","handleSubmitEvents","line","pipe","getCurrentValue","bind","success","onEnd","error","onError","normalizedUpKey","onUpKey","normalizedDownKey","onDownKey","numberKey","onNumberKey","spaceKey","onSpaceKey","aKey","onAllKey","iKey","onInverseKey","hide","render","firstRender","message","getQuestion","bottomContent","dontShowHints","cyan","bold","status","selection","join","choicesStr","renderChoices","indexPosition","getChoice","realIndexPosition","reduce","acc","i","type","l","name","split","length","paginate","pageSize","red","state","show","isValid","filter","Boolean","disabled","input","realLength","toggleChoice","shouldBeChecked","find","index","item","output","separatorOffset","getCheckbox","replace","green","radioOn","radioOff","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * `list` type prompt\n */\n\nconst _ = {\n  isArray: require('lodash/isArray'),\n  map: require('lodash/map'),\n  isString: require('lodash/isString'),\n};\nconst chalk = require('chalk');\nconst cliCursor = require('cli-cursor');\nconst figures = require('figures');\nconst { map, takeUntil } = require('rxjs/operators');\nconst Base = require('./base');\nconst observe = require('../utils/events');\nconst Paginator = require('../utils/paginator');\nconst incrementListIndex = require('../utils/incrementListIndex');\n\nclass CheckboxPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    if (!this.opt.choices) {\n      this.throwParamError('choices');\n    }\n\n    if (_.isArray(this.opt.default)) {\n      this.opt.choices.forEach(function (choice) {\n        if (this.opt.default.indexOf(choice.value) >= 0) {\n          choice.checked = true;\n        }\n      }, this);\n    }\n\n    this.pointer = 0;\n\n    // Make sure no default is set (so it won't be printed)\n    this.opt.default = null;\n\n    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;\n    this.paginator = new Paginator(this.screen, { isInfinite: shouldLoop });\n  }\n\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    const events = observe(this.rl);\n\n    const validation = this.handleSubmitEvents(\n      events.line.pipe(map(this.getCurrentValue.bind(this)))\n    );\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n\n    events.normalizedUpKey\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onUpKey.bind(this));\n    events.normalizedDownKey\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onDownKey.bind(this));\n    events.numberKey\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onNumberKey.bind(this));\n    events.spaceKey\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onSpaceKey.bind(this));\n    events.aKey.pipe(takeUntil(validation.success)).forEach(this.onAllKey.bind(this));\n    events.iKey.pipe(takeUntil(validation.success)).forEach(this.onInverseKey.bind(this));\n\n    // Init the prompt\n    cliCursor.hide();\n    this.render();\n    this.firstRender = false;\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {CheckboxPrompt} self\n   */\n\n  render(error) {\n    // Render question\n    let message = this.getQuestion();\n    let bottomContent = '';\n\n    if (!this.dontShowHints) {\n      message +=\n        '(Press ' +\n        chalk.cyan.bold('<space>') +\n        ' to select, ' +\n        chalk.cyan.bold('<a>') +\n        ' to toggle all, ' +\n        chalk.cyan.bold('<i>') +\n        ' to invert selection, and ' +\n        chalk.cyan.bold('<enter>') +\n        ' to proceed)';\n    }\n\n    // Render choices or answer depending on the state\n    if (this.status === 'answered') {\n      message += chalk.cyan(this.selection.join(', '));\n    } else {\n      const choicesStr = renderChoices(this.opt.choices, this.pointer);\n      const indexPosition = this.opt.choices.indexOf(\n        this.opt.choices.getChoice(this.pointer)\n      );\n      const realIndexPosition =\n        this.opt.choices.reduce((acc, value, i) => {\n          // Dont count lines past the choice we are looking at\n          if (i > indexPosition) {\n            return acc;\n          }\n          // Add line if it's a separator\n          if (value.type === 'separator') {\n            return acc + 1;\n          }\n\n          let l = value.name;\n          // Non-strings take up one line\n          if (typeof l !== 'string') {\n            return acc + 1;\n          }\n\n          // Calculate lines taken up by string\n          l = l.split('\\n');\n          return acc + l.length;\n        }, 0) - 1;\n      message +=\n        '\\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);\n    }\n\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  onEnd(state) {\n    this.status = 'answered';\n    this.dontShowHints = true;\n    // Rerender prompt (and clean subline error)\n    this.render();\n\n    this.screen.done();\n    cliCursor.show();\n    this.done(state.value);\n  }\n\n  onError(state) {\n    this.render(state.isValid);\n  }\n\n  getCurrentValue() {\n    const choices = this.opt.choices.filter(\n      (choice) => Boolean(choice.checked) && !choice.disabled\n    );\n\n    this.selection = _.map(choices, 'short');\n    return _.map(choices, 'value');\n  }\n\n  onUpKey() {\n    this.pointer = incrementListIndex(this.pointer, 'up', this.opt);\n    this.render();\n  }\n\n  onDownKey() {\n    this.pointer = incrementListIndex(this.pointer, 'down', this.opt);\n    this.render();\n  }\n\n  onNumberKey(input) {\n    if (input <= this.opt.choices.realLength) {\n      this.pointer = input - 1;\n      this.toggleChoice(this.pointer);\n    }\n\n    this.render();\n  }\n\n  onSpaceKey() {\n    this.toggleChoice(this.pointer);\n    this.render();\n  }\n\n  onAllKey() {\n    const shouldBeChecked = Boolean(\n      this.opt.choices.find((choice) => choice.type !== 'separator' && !choice.checked)\n    );\n\n    this.opt.choices.forEach((choice) => {\n      if (choice.type !== 'separator') {\n        choice.checked = shouldBeChecked;\n      }\n    });\n\n    this.render();\n  }\n\n  onInverseKey() {\n    this.opt.choices.forEach((choice) => {\n      if (choice.type !== 'separator') {\n        choice.checked = !choice.checked;\n      }\n    });\n\n    this.render();\n  }\n\n  toggleChoice(index) {\n    const item = this.opt.choices.getChoice(index);\n    if (item !== undefined) {\n      this.opt.choices.getChoice(index).checked = !item.checked;\n    }\n  }\n}\n\n/**\n * Function for rendering checkbox choices\n * @param  {Number} pointer Position of the pointer\n * @return {String}         Rendered content\n */\n\nfunction renderChoices(choices, pointer) {\n  let output = '';\n  let separatorOffset = 0;\n\n  choices.forEach((choice, i) => {\n    if (choice.type === 'separator') {\n      separatorOffset++;\n      output += ' ' + choice + '\\n';\n      return;\n    }\n\n    if (choice.disabled) {\n      separatorOffset++;\n      output += ' - ' + choice.name;\n      output += ' (' + (_.isString(choice.disabled) ? choice.disabled : 'Disabled') + ')';\n    } else {\n      const line = getCheckbox(choice.checked) + ' ' + choice.name;\n      if (i - separatorOffset === pointer) {\n        output += chalk.cyan(figures.pointer + line);\n      } else {\n        output += ' ' + line;\n      }\n    }\n\n    output += '\\n';\n  });\n\n  return output.replace(/\\n$/, '');\n}\n\n/**\n * Get the checkbox\n * @param  {Boolean} checked - add a X or not to the checkbox\n * @return {String} Composited checkbox string\n */\n\nfunction getCheckbox(checked) {\n  return checked ? chalk.green(figures.radioOn) : figures.radioOff;\n}\n\nmodule.exports = CheckboxPrompt;\n"]},"metadata":{},"sourceType":"script"}