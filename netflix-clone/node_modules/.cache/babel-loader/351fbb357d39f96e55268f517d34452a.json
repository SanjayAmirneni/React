{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\n\nconst _ = {\n  isNumber: require('lodash/isNumber'),\n  filter: require('lodash/filter'),\n  map: require('lodash/map'),\n  find: require('lodash/find')\n};\n\nconst Separator = require('./separator');\n\nconst Choice = require('./choice');\n/**\n * Choices collection\n * Collection of multiple `choice` object\n * @constructor\n * @param {Array} choices  All `choice` to keep in the collection\n */\n\n\nmodule.exports = class Choices {\n  constructor(choices, answers) {\n    this.choices = choices.map(val => {\n      if (val.type === 'separator') {\n        if (!(val instanceof Separator)) {\n          val = new Separator(val.line);\n        }\n\n        return val;\n      }\n\n      return new Choice(val, answers);\n    });\n    this.realChoices = this.choices.filter(Separator.exclude).filter(item => !item.disabled);\n    Object.defineProperty(this, 'length', {\n      get() {\n        return this.choices.length;\n      },\n\n      set(val) {\n        this.choices.length = val;\n      }\n\n    });\n    Object.defineProperty(this, 'realLength', {\n      get() {\n        return this.realChoices.length;\n      },\n\n      set() {\n        throw new Error('Cannot set `realLength` of a Choices collection');\n      }\n\n    });\n  }\n  /**\n   * Get a valid choice from the collection\n   * @param  {Number} selector  The selected choice index\n   * @return {Choice|Undefined} Return the matched choice or undefined\n   */\n\n\n  getChoice(selector) {\n    assert(_.isNumber(selector));\n    return this.realChoices[selector];\n  }\n  /**\n   * Get a raw element from the collection\n   * @param  {Number} selector  The selected index value\n   * @return {Choice|Undefined} Return the matched choice or undefined\n   */\n\n\n  get(selector) {\n    assert(_.isNumber(selector));\n    return this.choices[selector];\n  }\n  /**\n   * Match the valid choices against a where clause\n   * @param  {Object} whereClause Lodash `where` clause\n   * @return {Array}              Matching choices or empty array\n   */\n\n\n  where(whereClause) {\n    return _.filter(this.realChoices, whereClause);\n  }\n  /**\n   * Pluck a particular key from the choices\n   * @param  {String} propertyName Property name to select\n   * @return {Array}               Selected properties\n   */\n\n\n  pluck(propertyName) {\n    return _.map(this.realChoices, propertyName);\n  } // Expose usual Array methods\n\n\n  indexOf() {\n    return this.choices.indexOf(...arguments);\n  }\n\n  forEach() {\n    return this.choices.forEach(...arguments);\n  }\n\n  filter() {\n    return this.choices.filter(...arguments);\n  }\n\n  reduce() {\n    return this.choices.reduce(...arguments);\n  }\n\n  find(func) {\n    return _.find(this.choices, func);\n  }\n\n  push() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    const objs = _.map(args, val => new Choice(val));\n\n    this.choices.push(...objs);\n    this.realChoices = this.choices.filter(Separator.exclude).filter(item => !item.disabled);\n    return this.choices;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/DELL/OneDrive/Desktop/React/netflix-clone/node_modules/firebase-tools/node_modules/inquirer/lib/objects/choices.js"],"names":["assert","require","_","isNumber","filter","map","find","Separator","Choice","module","exports","Choices","constructor","choices","answers","val","type","line","realChoices","exclude","item","disabled","Object","defineProperty","get","length","set","Error","getChoice","selector","where","whereClause","pluck","propertyName","indexOf","forEach","reduce","func","push","args","objs"],"mappings":"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","sourcesContent":["'use strict';\nconst assert = require('assert');\nconst _ = {\n  isNumber: require('lodash/isNumber'),\n  filter: require('lodash/filter'),\n  map: require('lodash/map'),\n  find: require('lodash/find'),\n};\nconst Separator = require('./separator');\nconst Choice = require('./choice');\n\n/**\n * Choices collection\n * Collection of multiple `choice` object\n * @constructor\n * @param {Array} choices  All `choice` to keep in the collection\n */\n\nmodule.exports = class Choices {\n  constructor(choices, answers) {\n    this.choices = choices.map((val) => {\n      if (val.type === 'separator') {\n        if (!(val instanceof Separator)) {\n          val = new Separator(val.line);\n        }\n\n        return val;\n      }\n\n      return new Choice(val, answers);\n    });\n\n    this.realChoices = this.choices\n      .filter(Separator.exclude)\n      .filter((item) => !item.disabled);\n\n    Object.defineProperty(this, 'length', {\n      get() {\n        return this.choices.length;\n      },\n      set(val) {\n        this.choices.length = val;\n      },\n    });\n\n    Object.defineProperty(this, 'realLength', {\n      get() {\n        return this.realChoices.length;\n      },\n      set() {\n        throw new Error('Cannot set `realLength` of a Choices collection');\n      },\n    });\n  }\n\n  /**\n   * Get a valid choice from the collection\n   * @param  {Number} selector  The selected choice index\n   * @return {Choice|Undefined} Return the matched choice or undefined\n   */\n\n  getChoice(selector) {\n    assert(_.isNumber(selector));\n    return this.realChoices[selector];\n  }\n\n  /**\n   * Get a raw element from the collection\n   * @param  {Number} selector  The selected index value\n   * @return {Choice|Undefined} Return the matched choice or undefined\n   */\n\n  get(selector) {\n    assert(_.isNumber(selector));\n    return this.choices[selector];\n  }\n\n  /**\n   * Match the valid choices against a where clause\n   * @param  {Object} whereClause Lodash `where` clause\n   * @return {Array}              Matching choices or empty array\n   */\n\n  where(whereClause) {\n    return _.filter(this.realChoices, whereClause);\n  }\n\n  /**\n   * Pluck a particular key from the choices\n   * @param  {String} propertyName Property name to select\n   * @return {Array}               Selected properties\n   */\n\n  pluck(propertyName) {\n    return _.map(this.realChoices, propertyName);\n  }\n\n  // Expose usual Array methods\n  indexOf(...args) {\n    return this.choices.indexOf(...args);\n  }\n\n  forEach(...args) {\n    return this.choices.forEach(...args);\n  }\n\n  filter(...args) {\n    return this.choices.filter(...args);\n  }\n\n  reduce(...args) {\n    return this.choices.reduce(...args);\n  }\n\n  find(func) {\n    return _.find(this.choices, func);\n  }\n\n  push(...args) {\n    const objs = _.map(args, (val) => new Choice(val));\n    this.choices.push(...objs);\n    this.realChoices = this.choices\n      .filter(Separator.exclude)\n      .filter((item) => !item.disabled);\n    return this.choices;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}