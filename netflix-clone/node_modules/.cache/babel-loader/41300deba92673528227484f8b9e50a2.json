{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logout = exports.getAccessToken = exports.findAccountByEmail = exports.loginGithub = exports.loginGoogle = exports.setGlobalDefaultAccount = exports.setProjectAccount = exports.loginAdditionalAccount = exports.selectAccount = exports.setRefreshToken = exports.setActiveAccount = exports.getAllAccounts = exports.getAdditionalAccounts = exports.getProjectDefaultAccount = exports.getGlobalDefaultAccount = void 0;\n\nconst clc = require(\"cli-color\");\n\nconst fs = require(\"fs\");\n\nconst jwt = require(\"jsonwebtoken\");\n\nconst http = require(\"http\");\n\nconst opn = require(\"open\");\n\nconst path = require(\"path\");\n\nconst portfinder = require(\"portfinder\");\n\nconst url = require(\"url\");\n\nconst util = require(\"util\");\n\nconst api = require(\"./api\");\n\nconst apiv2 = require(\"./apiv2\");\n\nconst configstore_1 = require(\"./configstore\");\n\nconst error_1 = require(\"./error\");\n\nconst utils = require(\"./utils\");\n\nconst logger_1 = require(\"./logger\");\n\nconst prompt_1 = require(\"./prompt\");\n\nconst scopes = require(\"./scopes\");\n\nconst defaultCredentials_1 = require(\"./defaultCredentials\");\n\nconst uuid_1 = require(\"uuid\");\n\nconst crypto_1 = require(\"crypto\");\n\nconst cli_color_1 = require(\"cli-color\");\n\nconst track_1 = require(\"./track\");\n\nportfinder.basePort = 9005;\n\nfunction getGlobalDefaultAccount() {\n  const user = configstore_1.configstore.get(\"user\");\n  const tokens = configstore_1.configstore.get(\"tokens\");\n\n  if (!user || !tokens) {\n    return undefined;\n  }\n\n  return {\n    user,\n    tokens\n  };\n}\n\nexports.getGlobalDefaultAccount = getGlobalDefaultAccount;\n\nfunction getProjectDefaultAccount(projectDir) {\n  if (!projectDir) {\n    return getGlobalDefaultAccount();\n  }\n\n  const activeAccounts = configstore_1.configstore.get(\"activeAccounts\") || {};\n  const email = activeAccounts[projectDir];\n\n  if (!email) {\n    return getGlobalDefaultAccount();\n  }\n\n  const allAccounts = getAllAccounts();\n  return allAccounts.find(a => a.user.email === email);\n}\n\nexports.getProjectDefaultAccount = getProjectDefaultAccount;\n\nfunction getAdditionalAccounts() {\n  return configstore_1.configstore.get(\"additionalAccounts\") || [];\n}\n\nexports.getAdditionalAccounts = getAdditionalAccounts;\n\nfunction getAllAccounts() {\n  const res = [];\n  const defaultUser = getGlobalDefaultAccount();\n\n  if (defaultUser) {\n    res.push(defaultUser);\n  }\n\n  res.push(...getAdditionalAccounts());\n  return res;\n}\n\nexports.getAllAccounts = getAllAccounts;\n\nfunction setActiveAccount(options, account) {\n  if (account.tokens.refresh_token) {\n    setRefreshToken(account.tokens.refresh_token);\n  }\n\n  options.user = account.user;\n  options.tokens = account.tokens;\n}\n\nexports.setActiveAccount = setActiveAccount;\n\nfunction setRefreshToken(token) {\n  api.setRefreshToken(token);\n  apiv2.setRefreshToken(token);\n}\n\nexports.setRefreshToken = setRefreshToken;\n\nfunction selectAccount(account, projectRoot) {\n  const defaultUser = getProjectDefaultAccount(projectRoot);\n\n  if (!account) {\n    return defaultUser;\n  }\n\n  if (!defaultUser) {\n    throw new error_1.FirebaseError(`Account ${account} not found, have you run \"firebase login\"?`);\n  }\n\n  const matchingAccount = getAllAccounts().find(a => a.user.email === account);\n\n  if (matchingAccount) {\n    return matchingAccount;\n  }\n\n  throw new error_1.FirebaseError(`Account ${account} not found, run \"firebase login:list\" to see existing accounts or \"firebase login:add\" to add a new one`);\n}\n\nexports.selectAccount = selectAccount;\n\nasync function loginAdditionalAccount(useLocalhost, email) {\n  const result = await loginGoogle(useLocalhost, email);\n\n  if (typeof result.user === \"string\") {\n    throw new error_1.FirebaseError(\"Failed to parse auth response, see debug log.\");\n  }\n\n  const resultEmail = result.user.email;\n\n  if (email && resultEmail !== email) {\n    utils.logWarning(`Chosen account ${resultEmail} does not match account hint ${email}`);\n  }\n\n  const allAccounts = getAllAccounts();\n  const newAccount = {\n    user: result.user,\n    tokens: result.tokens\n  };\n  const existingAccount = allAccounts.find(a => a.user.email === resultEmail);\n\n  if (existingAccount) {\n    utils.logWarning(`Already logged in as ${resultEmail}.`);\n    updateAccount(newAccount);\n  } else {\n    const additionalAccounts = getAdditionalAccounts();\n    additionalAccounts.push(newAccount);\n    configstore_1.configstore.set(\"additionalAccounts\", additionalAccounts);\n  }\n\n  return newAccount;\n}\n\nexports.loginAdditionalAccount = loginAdditionalAccount;\n\nfunction setProjectAccount(projectDir, email) {\n  logger_1.logger.debug(`setProjectAccount(${projectDir}, ${email})`);\n  const activeAccounts = configstore_1.configstore.get(\"activeAccounts\") || {};\n  activeAccounts[projectDir] = email;\n  configstore_1.configstore.set(\"activeAccounts\", activeAccounts);\n}\n\nexports.setProjectAccount = setProjectAccount;\n\nfunction setGlobalDefaultAccount(account) {\n  configstore_1.configstore.set(\"user\", account.user);\n  configstore_1.configstore.set(\"tokens\", account.tokens);\n  const additionalAccounts = getAdditionalAccounts();\n  const index = additionalAccounts.findIndex(a => a.user.email === account.user.email);\n\n  if (index >= 0) {\n    additionalAccounts.splice(index, 1);\n    configstore_1.configstore.set(\"additionalAccounts\", additionalAccounts);\n  }\n}\n\nexports.setGlobalDefaultAccount = setGlobalDefaultAccount;\n\nfunction open(url) {\n  opn(url).catch(err => {\n    logger_1.logger.debug(\"Unable to open URL: \" + err.stack);\n  });\n}\n\nfunction invalidCredentialError() {\n  return new error_1.FirebaseError(\"Authentication Error: Your credentials are no longer valid. Please run \" + clc.bold(\"firebase login --reauth\") + \"\\n\\n\" + \"For CI servers and headless environments, generate a new token with \" + clc.bold(\"firebase login:ci\"), {\n    exit: 1\n  });\n}\n\nconst FIFTEEN_MINUTES_IN_MS = 15 * 60 * 1000;\nconst SCOPES = [scopes.EMAIL, scopes.OPENID, scopes.CLOUD_PROJECTS_READONLY, scopes.FIREBASE_PLATFORM, scopes.CLOUD_PLATFORM];\n\nconst _nonce = Math.floor(Math.random() * (2 << 29) + 1).toString();\n\nconst getPort = portfinder.getPortPromise;\nlet lastAccessToken;\n\nfunction getCallbackUrl(port) {\n  if (typeof port === \"undefined\") {\n    return \"urn:ietf:wg:oauth:2.0:oob\";\n  }\n\n  return `http://localhost:${port}`;\n}\n\nfunction queryParamString(args) {\n  const tokens = [];\n\n  for (const [key, value] of Object.entries(args)) {\n    if (typeof value === \"string\") {\n      tokens.push(key + \"=\" + encodeURIComponent(value));\n    }\n  }\n\n  return tokens.join(\"&\");\n}\n\nfunction getLoginUrl(callbackUrl, userHint) {\n  return api.authOrigin + \"/o/oauth2/auth?\" + queryParamString({\n    client_id: api.clientId,\n    scope: SCOPES.join(\" \"),\n    response_type: \"code\",\n    state: _nonce,\n    redirect_uri: callbackUrl,\n    login_hint: userHint\n  });\n}\n\nasync function getTokensFromAuthorizationCode(code, callbackUrl, verifier) {\n  var _a, _b;\n\n  let res;\n  const params = {\n    code: code,\n    client_id: api.clientId,\n    client_secret: api.clientSecret,\n    redirect_uri: callbackUrl,\n    grant_type: \"authorization_code\"\n  };\n\n  if (verifier) {\n    params[\"code_verifier\"] = verifier;\n  }\n\n  try {\n    res = await api.request(\"POST\", \"/o/oauth2/token\", {\n      origin: api.authOrigin,\n      form: params\n    });\n  } catch (err) {\n    if (err instanceof Error) {\n      logger_1.logger.debug(\"Token Fetch Error:\", err.stack || \"\");\n    } else {\n      logger_1.logger.debug(\"Token Fetch Error\");\n    }\n\n    throw invalidCredentialError();\n  }\n\n  if (!((_a = res === null || res === void 0 ? void 0 : res.body) === null || _a === void 0 ? void 0 : _a.access_token) && !((_b = res === null || res === void 0 ? void 0 : res.body) === null || _b === void 0 ? void 0 : _b.refresh_token)) {\n    logger_1.logger.debug(\"Token Fetch Error:\", res.statusCode, res.body);\n    throw invalidCredentialError();\n  }\n\n  lastAccessToken = Object.assign({\n    expires_at: Date.now() + res.body.expires_in * 1000\n  }, res.body);\n  return lastAccessToken;\n}\n\nconst GITHUB_SCOPES = [\"read:user\", \"repo\", \"public_repo\"];\n\nfunction getGithubLoginUrl(callbackUrl) {\n  return api.githubOrigin + \"/login/oauth/authorize?\" + queryParamString({\n    client_id: api.githubClientId,\n    state: _nonce,\n    redirect_uri: callbackUrl,\n    scope: GITHUB_SCOPES.join(\" \")\n  });\n}\n\nasync function getGithubTokensFromAuthorizationCode(code, callbackUrl) {\n  const res = await api.request(\"POST\", \"/login/oauth/access_token\", {\n    origin: api.githubOrigin,\n    form: {\n      client_id: api.githubClientId,\n      client_secret: api.githubClientSecret,\n      code,\n      redirect_uri: callbackUrl,\n      state: _nonce\n    }\n  });\n  return res.body.access_token;\n}\n\nasync function respondWithFile(req, res, statusCode, filename) {\n  const response = await util.promisify(fs.readFile)(path.join(__dirname, filename));\n  res.writeHead(statusCode, {\n    \"Content-Length\": response.length,\n    \"Content-Type\": \"text/html\"\n  });\n  res.end(response);\n  req.socket.destroy();\n}\n\nfunction urlsafeBase64(base64string) {\n  return base64string.replace(/\\+/g, \"-\").replace(/=+$/, \"\").replace(/\\//g, \"_\");\n}\n\nasync function loginRemotely(userHint) {\n  var _a;\n\n  const authProxyClient = new apiv2.Client({\n    urlPrefix: api.authProxyOrigin,\n    auth: false\n  });\n  const sessionId = (0, uuid_1.v4)();\n  const codeVerifier = (0, crypto_1.randomBytes)(32).toString(\"hex\");\n  const codeChallenge = urlsafeBase64((0, crypto_1.createHash)(\"sha256\").update(codeVerifier).digest(\"base64\"));\n  const attestToken = (_a = (await authProxyClient.post(\"/attest\", {\n    session_id: sessionId\n  })).body) === null || _a === void 0 ? void 0 : _a.token;\n  const loginUrl = `${api.authProxyOrigin}/login?code_challenge=${codeChallenge}&session=${sessionId}&attest=${attestToken}`;\n  logger_1.logger.info();\n  logger_1.logger.info(\"To sign in to the Firebase CLI:\");\n  logger_1.logger.info();\n  logger_1.logger.info(\"1. Take note of your session ID:\");\n  logger_1.logger.info();\n  logger_1.logger.info(`   ${(0, cli_color_1.bold)(sessionId.substring(0, 5).toUpperCase())}`);\n  logger_1.logger.info();\n  logger_1.logger.info(\"2. Visit the URL below on any device and follow the instructions to get your code:\");\n  logger_1.logger.info();\n  logger_1.logger.info(`   ${loginUrl}`);\n  logger_1.logger.info();\n  logger_1.logger.info(\"3. Paste or enter the authorization code below once you have it:\");\n  logger_1.logger.info();\n  const code = await (0, prompt_1.promptOnce)({\n    type: \"input\",\n    message: \"Enter authorization code:\"\n  });\n\n  try {\n    const tokens = await getTokensFromAuthorizationCode(code, `${api.authProxyOrigin}/complete`, codeVerifier);\n    void (0, track_1.track)(\"login\", \"google_remote\");\n    return {\n      user: jwt.decode(tokens.id_token),\n      tokens: tokens,\n      scopes: SCOPES\n    };\n  } catch (e) {\n    throw new error_1.FirebaseError(\"Unable to authenticate using the provided code. Please try again.\");\n  }\n}\n\nasync function loginWithLocalhostGoogle(port, userHint) {\n  const callbackUrl = getCallbackUrl(port);\n  const authUrl = getLoginUrl(callbackUrl, userHint);\n  const successTemplate = \"../templates/loginSuccess.html\";\n  const tokens = await loginWithLocalhost(port, callbackUrl, authUrl, successTemplate, getTokensFromAuthorizationCode);\n  void (0, track_1.track)(\"login\", \"google_localhost\");\n  return {\n    user: jwt.decode(tokens.id_token),\n    tokens: tokens,\n    scopes: tokens.scopes\n  };\n}\n\nasync function loginWithLocalhostGitHub(port) {\n  const callbackUrl = getCallbackUrl(port);\n  const authUrl = getGithubLoginUrl(callbackUrl);\n  const successTemplate = \"../templates/loginSuccessGithub.html\";\n  const tokens = await loginWithLocalhost(port, callbackUrl, authUrl, successTemplate, getGithubTokensFromAuthorizationCode);\n  void (0, track_1.track)(\"login\", \"google_localhost\");\n  return tokens;\n}\n\nasync function loginWithLocalhost(port, callbackUrl, authUrl, successTemplate, getTokens) {\n  return new Promise((resolve, reject) => {\n    const server = http.createServer(async (req, res) => {\n      let tokens;\n      const query = url.parse(`${req.url}`, true).query || {};\n      const queryState = query.state;\n      const queryCode = query.code;\n\n      if (queryState !== _nonce || typeof queryCode !== \"string\") {\n        await respondWithFile(req, res, 400, \"../templates/loginFailure.html\");\n        reject(new error_1.FirebaseError(\"Unexpected error while logging in\"));\n        server.close();\n        return;\n      }\n\n      try {\n        const tokens = await getTokens(queryCode, callbackUrl);\n        await respondWithFile(req, res, 200, successTemplate);\n        resolve(tokens);\n      } catch (err) {\n        await respondWithFile(req, res, 400, \"../templates/loginFailure.html\");\n        reject(err);\n      }\n\n      server.close();\n      return;\n    });\n    server.listen(port, () => {\n      logger_1.logger.info();\n      logger_1.logger.info(\"Visit this URL on this device to log in:\");\n      logger_1.logger.info(clc.bold.underline(authUrl));\n      logger_1.logger.info();\n      logger_1.logger.info(\"Waiting for authentication...\");\n      open(authUrl);\n    });\n    server.on(\"error\", err => {\n      reject(err);\n    });\n  });\n}\n\nasync function loginGoogle(localhost, userHint) {\n  if (localhost) {\n    const port = await getPort();\n\n    try {\n      const port = await getPort();\n      return await loginWithLocalhostGoogle(port, userHint);\n    } catch (_a) {\n      return await loginRemotely(userHint);\n    }\n  }\n\n  return await loginRemotely(userHint);\n}\n\nexports.loginGoogle = loginGoogle;\n\nasync function loginGithub() {\n  const port = await getPort();\n  return loginWithLocalhostGitHub(port);\n}\n\nexports.loginGithub = loginGithub;\n\nfunction findAccountByEmail(email) {\n  return getAllAccounts().find(a => a.user.email === email);\n}\n\nexports.findAccountByEmail = findAccountByEmail;\n\nfunction haveValidTokens(refreshToken, authScopes) {\n  var _a;\n\n  if (!(lastAccessToken === null || lastAccessToken === void 0 ? void 0 : lastAccessToken.access_token)) {\n    const tokens = configstore_1.configstore.get(\"tokens\");\n\n    if (refreshToken === (tokens === null || tokens === void 0 ? void 0 : tokens.refresh_token)) {\n      lastAccessToken = tokens;\n    }\n  }\n\n  const hasTokens = !!(lastAccessToken === null || lastAccessToken === void 0 ? void 0 : lastAccessToken.access_token);\n  const oldScopesJSON = JSON.stringify(((_a = lastAccessToken === null || lastAccessToken === void 0 ? void 0 : lastAccessToken.scopes) === null || _a === void 0 ? void 0 : _a.sort()) || []);\n  const newScopesJSON = JSON.stringify(authScopes.sort());\n  const hasSameScopes = oldScopesJSON === newScopesJSON;\n  const isExpired = ((lastAccessToken === null || lastAccessToken === void 0 ? void 0 : lastAccessToken.expires_at) || 0) < Date.now() + FIFTEEN_MINUTES_IN_MS;\n  return hasTokens && hasSameScopes && !isExpired;\n}\n\nfunction deleteAccount(account) {\n  const defaultAccount = getGlobalDefaultAccount();\n\n  if (account.user.email === (defaultAccount === null || defaultAccount === void 0 ? void 0 : defaultAccount.user.email)) {\n    configstore_1.configstore.delete(\"user\");\n    configstore_1.configstore.delete(\"tokens\");\n    configstore_1.configstore.delete(\"usage\");\n    configstore_1.configstore.delete(\"analytics-uuid\");\n  }\n\n  const additionalAccounts = getAdditionalAccounts();\n  const remainingAccounts = additionalAccounts.filter(a => a.user.email !== account.user.email);\n  configstore_1.configstore.set(\"additionalAccounts\", remainingAccounts);\n  const activeAccounts = configstore_1.configstore.get(\"activeAccounts\") || {};\n\n  for (const [projectDir, projectAccount] of Object.entries(activeAccounts)) {\n    if (projectAccount === account.user.email) {\n      delete activeAccounts[projectDir];\n    }\n  }\n\n  configstore_1.configstore.set(\"activeAccounts\", activeAccounts);\n}\n\nfunction updateAccount(account) {\n  const defaultAccount = getGlobalDefaultAccount();\n\n  if (account.user.email === (defaultAccount === null || defaultAccount === void 0 ? void 0 : defaultAccount.user.email)) {\n    configstore_1.configstore.set(\"user\", account.user);\n    configstore_1.configstore.set(\"tokens\", account.tokens);\n  }\n\n  const additionalAccounts = getAdditionalAccounts();\n  const accountIndex = additionalAccounts.findIndex(a => a.user.email === account.user.email);\n\n  if (accountIndex >= 0) {\n    additionalAccounts.splice(accountIndex, 1, account);\n    configstore_1.configstore.set(\"additionalAccounts\", additionalAccounts);\n  }\n}\n\nfunction findAccountByRefreshToken(refreshToken) {\n  return getAllAccounts().find(a => a.tokens.refresh_token === refreshToken);\n}\n\nfunction logoutCurrentSession(refreshToken) {\n  const account = findAccountByRefreshToken(refreshToken);\n\n  if (!account) {\n    return;\n  }\n\n  (0, defaultCredentials_1.clearCredentials)(account);\n  deleteAccount(account);\n}\n\nasync function refreshTokens(refreshToken, authScopes) {\n  var _a, _b, _c;\n\n  logger_1.logger.debug(\"> refreshing access token with scopes:\", JSON.stringify(authScopes));\n\n  try {\n    const res = await api.request(\"POST\", \"/oauth2/v3/token\", {\n      origin: api.googleOrigin,\n      form: {\n        refresh_token: refreshToken,\n        client_id: api.clientId,\n        client_secret: api.clientSecret,\n        grant_type: \"refresh_token\",\n        scope: (authScopes || []).join(\" \")\n      },\n      logOptions: {\n        skipRequestBody: true,\n        skipQueryParams: true,\n        skipResponseBody: true\n      }\n    });\n\n    if (res.status === 401 || res.status === 400) {\n      return {\n        access_token: refreshToken\n      };\n    }\n\n    if (typeof ((_a = res.body) === null || _a === void 0 ? void 0 : _a.access_token) !== \"string\") {\n      throw invalidCredentialError();\n    }\n\n    lastAccessToken = Object.assign({\n      expires_at: Date.now() + res.body.expires_in * 1000,\n      refresh_token: refreshToken,\n      scopes: authScopes\n    }, res.body);\n    const account = findAccountByRefreshToken(refreshToken);\n\n    if (account && lastAccessToken) {\n      account.tokens = lastAccessToken;\n      updateAccount(account);\n    }\n\n    return lastAccessToken;\n  } catch (err) {\n    if (((_c = (_b = err === null || err === void 0 ? void 0 : err.context) === null || _b === void 0 ? void 0 : _b.body) === null || _c === void 0 ? void 0 : _c.error) === \"invalid_scope\") {\n      throw new error_1.FirebaseError(\"This command requires new authorization scopes not granted to your current session. Please run \" + clc.bold(\"firebase login --reauth\") + \"\\n\\n\" + \"For CI servers and headless environments, generate a new token with \" + clc.bold(\"firebase login:ci\"), {\n        exit: 1\n      });\n    }\n\n    throw invalidCredentialError();\n  }\n}\n\nasync function getAccessToken(refreshToken, authScopes) {\n  if (haveValidTokens(refreshToken, authScopes)) {\n    return lastAccessToken;\n  }\n\n  return refreshTokens(refreshToken, authScopes);\n}\n\nexports.getAccessToken = getAccessToken;\n\nasync function logout(refreshToken) {\n  if ((lastAccessToken === null || lastAccessToken === void 0 ? void 0 : lastAccessToken.refresh_token) === refreshToken) {\n    lastAccessToken = undefined;\n  }\n\n  logoutCurrentSession(refreshToken);\n\n  try {\n    await api.request(\"GET\", \"/o/oauth2/revoke\", {\n      origin: api.authOrigin,\n      data: {\n        token: refreshToken\n      }\n    });\n  } catch (thrown) {\n    const err = thrown instanceof Error ? thrown : new Error(thrown);\n    throw new error_1.FirebaseError(\"Authentication Error.\", {\n      exit: 1,\n      original: err\n    });\n  }\n}\n\nexports.logout = logout;","map":{"version":3,"sources":["C:/Users/DELL/OneDrive/Desktop/React/netflix-clone/node_modules/firebase-tools/lib/auth.js"],"names":["Object","defineProperty","exports","value","logout","getAccessToken","findAccountByEmail","loginGithub","loginGoogle","setGlobalDefaultAccount","setProjectAccount","loginAdditionalAccount","selectAccount","setRefreshToken","setActiveAccount","getAllAccounts","getAdditionalAccounts","getProjectDefaultAccount","getGlobalDefaultAccount","clc","require","fs","jwt","http","opn","path","portfinder","url","util","api","apiv2","configstore_1","error_1","utils","logger_1","prompt_1","scopes","defaultCredentials_1","uuid_1","crypto_1","cli_color_1","track_1","basePort","user","configstore","get","tokens","undefined","projectDir","activeAccounts","email","allAccounts","find","a","res","defaultUser","push","options","account","refresh_token","token","projectRoot","FirebaseError","matchingAccount","useLocalhost","result","resultEmail","logWarning","newAccount","existingAccount","updateAccount","additionalAccounts","set","logger","debug","index","findIndex","splice","open","catch","err","stack","invalidCredentialError","bold","exit","FIFTEEN_MINUTES_IN_MS","SCOPES","EMAIL","OPENID","CLOUD_PROJECTS_READONLY","FIREBASE_PLATFORM","CLOUD_PLATFORM","_nonce","Math","floor","random","toString","getPort","getPortPromise","lastAccessToken","getCallbackUrl","port","queryParamString","args","key","entries","encodeURIComponent","join","getLoginUrl","callbackUrl","userHint","authOrigin","client_id","clientId","scope","response_type","state","redirect_uri","login_hint","getTokensFromAuthorizationCode","code","verifier","_a","_b","params","client_secret","clientSecret","grant_type","request","origin","form","Error","body","access_token","statusCode","assign","expires_at","Date","now","expires_in","GITHUB_SCOPES","getGithubLoginUrl","githubOrigin","githubClientId","getGithubTokensFromAuthorizationCode","githubClientSecret","respondWithFile","req","filename","response","promisify","readFile","__dirname","writeHead","length","end","socket","destroy","urlsafeBase64","base64string","replace","loginRemotely","authProxyClient","Client","urlPrefix","authProxyOrigin","auth","sessionId","v4","codeVerifier","randomBytes","codeChallenge","createHash","update","digest","attestToken","post","session_id","loginUrl","info","substring","toUpperCase","promptOnce","type","message","track","decode","id_token","e","loginWithLocalhostGoogle","authUrl","successTemplate","loginWithLocalhost","loginWithLocalhostGitHub","getTokens","Promise","resolve","reject","server","createServer","query","parse","queryState","queryCode","close","listen","underline","on","localhost","haveValidTokens","refreshToken","authScopes","hasTokens","oldScopesJSON","JSON","stringify","sort","newScopesJSON","hasSameScopes","isExpired","deleteAccount","defaultAccount","delete","remainingAccounts","filter","projectAccount","accountIndex","findAccountByRefreshToken","logoutCurrentSession","clearCredentials","refreshTokens","_c","googleOrigin","logOptions","skipRequestBody","skipQueryParams","skipResponseBody","status","context","error","data","thrown","original"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.logout = exports.getAccessToken = exports.findAccountByEmail = exports.loginGithub = exports.loginGoogle = exports.setGlobalDefaultAccount = exports.setProjectAccount = exports.loginAdditionalAccount = exports.selectAccount = exports.setRefreshToken = exports.setActiveAccount = exports.getAllAccounts = exports.getAdditionalAccounts = exports.getProjectDefaultAccount = exports.getGlobalDefaultAccount = void 0;\nconst clc = require(\"cli-color\");\nconst fs = require(\"fs\");\nconst jwt = require(\"jsonwebtoken\");\nconst http = require(\"http\");\nconst opn = require(\"open\");\nconst path = require(\"path\");\nconst portfinder = require(\"portfinder\");\nconst url = require(\"url\");\nconst util = require(\"util\");\nconst api = require(\"./api\");\nconst apiv2 = require(\"./apiv2\");\nconst configstore_1 = require(\"./configstore\");\nconst error_1 = require(\"./error\");\nconst utils = require(\"./utils\");\nconst logger_1 = require(\"./logger\");\nconst prompt_1 = require(\"./prompt\");\nconst scopes = require(\"./scopes\");\nconst defaultCredentials_1 = require(\"./defaultCredentials\");\nconst uuid_1 = require(\"uuid\");\nconst crypto_1 = require(\"crypto\");\nconst cli_color_1 = require(\"cli-color\");\nconst track_1 = require(\"./track\");\nportfinder.basePort = 9005;\nfunction getGlobalDefaultAccount() {\n    const user = configstore_1.configstore.get(\"user\");\n    const tokens = configstore_1.configstore.get(\"tokens\");\n    if (!user || !tokens) {\n        return undefined;\n    }\n    return {\n        user,\n        tokens,\n    };\n}\nexports.getGlobalDefaultAccount = getGlobalDefaultAccount;\nfunction getProjectDefaultAccount(projectDir) {\n    if (!projectDir) {\n        return getGlobalDefaultAccount();\n    }\n    const activeAccounts = configstore_1.configstore.get(\"activeAccounts\") || {};\n    const email = activeAccounts[projectDir];\n    if (!email) {\n        return getGlobalDefaultAccount();\n    }\n    const allAccounts = getAllAccounts();\n    return allAccounts.find((a) => a.user.email === email);\n}\nexports.getProjectDefaultAccount = getProjectDefaultAccount;\nfunction getAdditionalAccounts() {\n    return configstore_1.configstore.get(\"additionalAccounts\") || [];\n}\nexports.getAdditionalAccounts = getAdditionalAccounts;\nfunction getAllAccounts() {\n    const res = [];\n    const defaultUser = getGlobalDefaultAccount();\n    if (defaultUser) {\n        res.push(defaultUser);\n    }\n    res.push(...getAdditionalAccounts());\n    return res;\n}\nexports.getAllAccounts = getAllAccounts;\nfunction setActiveAccount(options, account) {\n    if (account.tokens.refresh_token) {\n        setRefreshToken(account.tokens.refresh_token);\n    }\n    options.user = account.user;\n    options.tokens = account.tokens;\n}\nexports.setActiveAccount = setActiveAccount;\nfunction setRefreshToken(token) {\n    api.setRefreshToken(token);\n    apiv2.setRefreshToken(token);\n}\nexports.setRefreshToken = setRefreshToken;\nfunction selectAccount(account, projectRoot) {\n    const defaultUser = getProjectDefaultAccount(projectRoot);\n    if (!account) {\n        return defaultUser;\n    }\n    if (!defaultUser) {\n        throw new error_1.FirebaseError(`Account ${account} not found, have you run \"firebase login\"?`);\n    }\n    const matchingAccount = getAllAccounts().find((a) => a.user.email === account);\n    if (matchingAccount) {\n        return matchingAccount;\n    }\n    throw new error_1.FirebaseError(`Account ${account} not found, run \"firebase login:list\" to see existing accounts or \"firebase login:add\" to add a new one`);\n}\nexports.selectAccount = selectAccount;\nasync function loginAdditionalAccount(useLocalhost, email) {\n    const result = await loginGoogle(useLocalhost, email);\n    if (typeof result.user === \"string\") {\n        throw new error_1.FirebaseError(\"Failed to parse auth response, see debug log.\");\n    }\n    const resultEmail = result.user.email;\n    if (email && resultEmail !== email) {\n        utils.logWarning(`Chosen account ${resultEmail} does not match account hint ${email}`);\n    }\n    const allAccounts = getAllAccounts();\n    const newAccount = {\n        user: result.user,\n        tokens: result.tokens,\n    };\n    const existingAccount = allAccounts.find((a) => a.user.email === resultEmail);\n    if (existingAccount) {\n        utils.logWarning(`Already logged in as ${resultEmail}.`);\n        updateAccount(newAccount);\n    }\n    else {\n        const additionalAccounts = getAdditionalAccounts();\n        additionalAccounts.push(newAccount);\n        configstore_1.configstore.set(\"additionalAccounts\", additionalAccounts);\n    }\n    return newAccount;\n}\nexports.loginAdditionalAccount = loginAdditionalAccount;\nfunction setProjectAccount(projectDir, email) {\n    logger_1.logger.debug(`setProjectAccount(${projectDir}, ${email})`);\n    const activeAccounts = configstore_1.configstore.get(\"activeAccounts\") || {};\n    activeAccounts[projectDir] = email;\n    configstore_1.configstore.set(\"activeAccounts\", activeAccounts);\n}\nexports.setProjectAccount = setProjectAccount;\nfunction setGlobalDefaultAccount(account) {\n    configstore_1.configstore.set(\"user\", account.user);\n    configstore_1.configstore.set(\"tokens\", account.tokens);\n    const additionalAccounts = getAdditionalAccounts();\n    const index = additionalAccounts.findIndex((a) => a.user.email === account.user.email);\n    if (index >= 0) {\n        additionalAccounts.splice(index, 1);\n        configstore_1.configstore.set(\"additionalAccounts\", additionalAccounts);\n    }\n}\nexports.setGlobalDefaultAccount = setGlobalDefaultAccount;\nfunction open(url) {\n    opn(url).catch((err) => {\n        logger_1.logger.debug(\"Unable to open URL: \" + err.stack);\n    });\n}\nfunction invalidCredentialError() {\n    return new error_1.FirebaseError(\"Authentication Error: Your credentials are no longer valid. Please run \" +\n        clc.bold(\"firebase login --reauth\") +\n        \"\\n\\n\" +\n        \"For CI servers and headless environments, generate a new token with \" +\n        clc.bold(\"firebase login:ci\"), { exit: 1 });\n}\nconst FIFTEEN_MINUTES_IN_MS = 15 * 60 * 1000;\nconst SCOPES = [\n    scopes.EMAIL,\n    scopes.OPENID,\n    scopes.CLOUD_PROJECTS_READONLY,\n    scopes.FIREBASE_PLATFORM,\n    scopes.CLOUD_PLATFORM,\n];\nconst _nonce = Math.floor(Math.random() * (2 << 29) + 1).toString();\nconst getPort = portfinder.getPortPromise;\nlet lastAccessToken;\nfunction getCallbackUrl(port) {\n    if (typeof port === \"undefined\") {\n        return \"urn:ietf:wg:oauth:2.0:oob\";\n    }\n    return `http://localhost:${port}`;\n}\nfunction queryParamString(args) {\n    const tokens = [];\n    for (const [key, value] of Object.entries(args)) {\n        if (typeof value === \"string\") {\n            tokens.push(key + \"=\" + encodeURIComponent(value));\n        }\n    }\n    return tokens.join(\"&\");\n}\nfunction getLoginUrl(callbackUrl, userHint) {\n    return (api.authOrigin +\n        \"/o/oauth2/auth?\" +\n        queryParamString({\n            client_id: api.clientId,\n            scope: SCOPES.join(\" \"),\n            response_type: \"code\",\n            state: _nonce,\n            redirect_uri: callbackUrl,\n            login_hint: userHint,\n        }));\n}\nasync function getTokensFromAuthorizationCode(code, callbackUrl, verifier) {\n    var _a, _b;\n    let res;\n    const params = {\n        code: code,\n        client_id: api.clientId,\n        client_secret: api.clientSecret,\n        redirect_uri: callbackUrl,\n        grant_type: \"authorization_code\",\n    };\n    if (verifier) {\n        params[\"code_verifier\"] = verifier;\n    }\n    try {\n        res = await api.request(\"POST\", \"/o/oauth2/token\", {\n            origin: api.authOrigin,\n            form: params,\n        });\n    }\n    catch (err) {\n        if (err instanceof Error) {\n            logger_1.logger.debug(\"Token Fetch Error:\", err.stack || \"\");\n        }\n        else {\n            logger_1.logger.debug(\"Token Fetch Error\");\n        }\n        throw invalidCredentialError();\n    }\n    if (!((_a = res === null || res === void 0 ? void 0 : res.body) === null || _a === void 0 ? void 0 : _a.access_token) && !((_b = res === null || res === void 0 ? void 0 : res.body) === null || _b === void 0 ? void 0 : _b.refresh_token)) {\n        logger_1.logger.debug(\"Token Fetch Error:\", res.statusCode, res.body);\n        throw invalidCredentialError();\n    }\n    lastAccessToken = Object.assign({\n        expires_at: Date.now() + res.body.expires_in * 1000,\n    }, res.body);\n    return lastAccessToken;\n}\nconst GITHUB_SCOPES = [\"read:user\", \"repo\", \"public_repo\"];\nfunction getGithubLoginUrl(callbackUrl) {\n    return (api.githubOrigin +\n        \"/login/oauth/authorize?\" +\n        queryParamString({\n            client_id: api.githubClientId,\n            state: _nonce,\n            redirect_uri: callbackUrl,\n            scope: GITHUB_SCOPES.join(\" \"),\n        }));\n}\nasync function getGithubTokensFromAuthorizationCode(code, callbackUrl) {\n    const res = await api.request(\"POST\", \"/login/oauth/access_token\", {\n        origin: api.githubOrigin,\n        form: {\n            client_id: api.githubClientId,\n            client_secret: api.githubClientSecret,\n            code,\n            redirect_uri: callbackUrl,\n            state: _nonce,\n        },\n    });\n    return res.body.access_token;\n}\nasync function respondWithFile(req, res, statusCode, filename) {\n    const response = await util.promisify(fs.readFile)(path.join(__dirname, filename));\n    res.writeHead(statusCode, {\n        \"Content-Length\": response.length,\n        \"Content-Type\": \"text/html\",\n    });\n    res.end(response);\n    req.socket.destroy();\n}\nfunction urlsafeBase64(base64string) {\n    return base64string.replace(/\\+/g, \"-\").replace(/=+$/, \"\").replace(/\\//g, \"_\");\n}\nasync function loginRemotely(userHint) {\n    var _a;\n    const authProxyClient = new apiv2.Client({\n        urlPrefix: api.authProxyOrigin,\n        auth: false,\n    });\n    const sessionId = (0, uuid_1.v4)();\n    const codeVerifier = (0, crypto_1.randomBytes)(32).toString(\"hex\");\n    const codeChallenge = urlsafeBase64((0, crypto_1.createHash)(\"sha256\").update(codeVerifier).digest(\"base64\"));\n    const attestToken = (_a = (await authProxyClient.post(\"/attest\", {\n        session_id: sessionId,\n    })).body) === null || _a === void 0 ? void 0 : _a.token;\n    const loginUrl = `${api.authProxyOrigin}/login?code_challenge=${codeChallenge}&session=${sessionId}&attest=${attestToken}`;\n    logger_1.logger.info();\n    logger_1.logger.info(\"To sign in to the Firebase CLI:\");\n    logger_1.logger.info();\n    logger_1.logger.info(\"1. Take note of your session ID:\");\n    logger_1.logger.info();\n    logger_1.logger.info(`   ${(0, cli_color_1.bold)(sessionId.substring(0, 5).toUpperCase())}`);\n    logger_1.logger.info();\n    logger_1.logger.info(\"2. Visit the URL below on any device and follow the instructions to get your code:\");\n    logger_1.logger.info();\n    logger_1.logger.info(`   ${loginUrl}`);\n    logger_1.logger.info();\n    logger_1.logger.info(\"3. Paste or enter the authorization code below once you have it:\");\n    logger_1.logger.info();\n    const code = await (0, prompt_1.promptOnce)({\n        type: \"input\",\n        message: \"Enter authorization code:\",\n    });\n    try {\n        const tokens = await getTokensFromAuthorizationCode(code, `${api.authProxyOrigin}/complete`, codeVerifier);\n        void (0, track_1.track)(\"login\", \"google_remote\");\n        return {\n            user: jwt.decode(tokens.id_token),\n            tokens: tokens,\n            scopes: SCOPES,\n        };\n    }\n    catch (e) {\n        throw new error_1.FirebaseError(\"Unable to authenticate using the provided code. Please try again.\");\n    }\n}\nasync function loginWithLocalhostGoogle(port, userHint) {\n    const callbackUrl = getCallbackUrl(port);\n    const authUrl = getLoginUrl(callbackUrl, userHint);\n    const successTemplate = \"../templates/loginSuccess.html\";\n    const tokens = await loginWithLocalhost(port, callbackUrl, authUrl, successTemplate, getTokensFromAuthorizationCode);\n    void (0, track_1.track)(\"login\", \"google_localhost\");\n    return {\n        user: jwt.decode(tokens.id_token),\n        tokens: tokens,\n        scopes: tokens.scopes,\n    };\n}\nasync function loginWithLocalhostGitHub(port) {\n    const callbackUrl = getCallbackUrl(port);\n    const authUrl = getGithubLoginUrl(callbackUrl);\n    const successTemplate = \"../templates/loginSuccessGithub.html\";\n    const tokens = await loginWithLocalhost(port, callbackUrl, authUrl, successTemplate, getGithubTokensFromAuthorizationCode);\n    void (0, track_1.track)(\"login\", \"google_localhost\");\n    return tokens;\n}\nasync function loginWithLocalhost(port, callbackUrl, authUrl, successTemplate, getTokens) {\n    return new Promise((resolve, reject) => {\n        const server = http.createServer(async (req, res) => {\n            let tokens;\n            const query = url.parse(`${req.url}`, true).query || {};\n            const queryState = query.state;\n            const queryCode = query.code;\n            if (queryState !== _nonce || typeof queryCode !== \"string\") {\n                await respondWithFile(req, res, 400, \"../templates/loginFailure.html\");\n                reject(new error_1.FirebaseError(\"Unexpected error while logging in\"));\n                server.close();\n                return;\n            }\n            try {\n                const tokens = await getTokens(queryCode, callbackUrl);\n                await respondWithFile(req, res, 200, successTemplate);\n                resolve(tokens);\n            }\n            catch (err) {\n                await respondWithFile(req, res, 400, \"../templates/loginFailure.html\");\n                reject(err);\n            }\n            server.close();\n            return;\n        });\n        server.listen(port, () => {\n            logger_1.logger.info();\n            logger_1.logger.info(\"Visit this URL on this device to log in:\");\n            logger_1.logger.info(clc.bold.underline(authUrl));\n            logger_1.logger.info();\n            logger_1.logger.info(\"Waiting for authentication...\");\n            open(authUrl);\n        });\n        server.on(\"error\", (err) => {\n            reject(err);\n        });\n    });\n}\nasync function loginGoogle(localhost, userHint) {\n    if (localhost) {\n        const port = await getPort();\n        try {\n            const port = await getPort();\n            return await loginWithLocalhostGoogle(port, userHint);\n        }\n        catch (_a) {\n            return await loginRemotely(userHint);\n        }\n    }\n    return await loginRemotely(userHint);\n}\nexports.loginGoogle = loginGoogle;\nasync function loginGithub() {\n    const port = await getPort();\n    return loginWithLocalhostGitHub(port);\n}\nexports.loginGithub = loginGithub;\nfunction findAccountByEmail(email) {\n    return getAllAccounts().find((a) => a.user.email === email);\n}\nexports.findAccountByEmail = findAccountByEmail;\nfunction haveValidTokens(refreshToken, authScopes) {\n    var _a;\n    if (!(lastAccessToken === null || lastAccessToken === void 0 ? void 0 : lastAccessToken.access_token)) {\n        const tokens = configstore_1.configstore.get(\"tokens\");\n        if (refreshToken === (tokens === null || tokens === void 0 ? void 0 : tokens.refresh_token)) {\n            lastAccessToken = tokens;\n        }\n    }\n    const hasTokens = !!(lastAccessToken === null || lastAccessToken === void 0 ? void 0 : lastAccessToken.access_token);\n    const oldScopesJSON = JSON.stringify(((_a = lastAccessToken === null || lastAccessToken === void 0 ? void 0 : lastAccessToken.scopes) === null || _a === void 0 ? void 0 : _a.sort()) || []);\n    const newScopesJSON = JSON.stringify(authScopes.sort());\n    const hasSameScopes = oldScopesJSON === newScopesJSON;\n    const isExpired = ((lastAccessToken === null || lastAccessToken === void 0 ? void 0 : lastAccessToken.expires_at) || 0) < Date.now() + FIFTEEN_MINUTES_IN_MS;\n    return hasTokens && hasSameScopes && !isExpired;\n}\nfunction deleteAccount(account) {\n    const defaultAccount = getGlobalDefaultAccount();\n    if (account.user.email === (defaultAccount === null || defaultAccount === void 0 ? void 0 : defaultAccount.user.email)) {\n        configstore_1.configstore.delete(\"user\");\n        configstore_1.configstore.delete(\"tokens\");\n        configstore_1.configstore.delete(\"usage\");\n        configstore_1.configstore.delete(\"analytics-uuid\");\n    }\n    const additionalAccounts = getAdditionalAccounts();\n    const remainingAccounts = additionalAccounts.filter((a) => a.user.email !== account.user.email);\n    configstore_1.configstore.set(\"additionalAccounts\", remainingAccounts);\n    const activeAccounts = configstore_1.configstore.get(\"activeAccounts\") || {};\n    for (const [projectDir, projectAccount] of Object.entries(activeAccounts)) {\n        if (projectAccount === account.user.email) {\n            delete activeAccounts[projectDir];\n        }\n    }\n    configstore_1.configstore.set(\"activeAccounts\", activeAccounts);\n}\nfunction updateAccount(account) {\n    const defaultAccount = getGlobalDefaultAccount();\n    if (account.user.email === (defaultAccount === null || defaultAccount === void 0 ? void 0 : defaultAccount.user.email)) {\n        configstore_1.configstore.set(\"user\", account.user);\n        configstore_1.configstore.set(\"tokens\", account.tokens);\n    }\n    const additionalAccounts = getAdditionalAccounts();\n    const accountIndex = additionalAccounts.findIndex((a) => a.user.email === account.user.email);\n    if (accountIndex >= 0) {\n        additionalAccounts.splice(accountIndex, 1, account);\n        configstore_1.configstore.set(\"additionalAccounts\", additionalAccounts);\n    }\n}\nfunction findAccountByRefreshToken(refreshToken) {\n    return getAllAccounts().find((a) => a.tokens.refresh_token === refreshToken);\n}\nfunction logoutCurrentSession(refreshToken) {\n    const account = findAccountByRefreshToken(refreshToken);\n    if (!account) {\n        return;\n    }\n    (0, defaultCredentials_1.clearCredentials)(account);\n    deleteAccount(account);\n}\nasync function refreshTokens(refreshToken, authScopes) {\n    var _a, _b, _c;\n    logger_1.logger.debug(\"> refreshing access token with scopes:\", JSON.stringify(authScopes));\n    try {\n        const res = await api.request(\"POST\", \"/oauth2/v3/token\", {\n            origin: api.googleOrigin,\n            form: {\n                refresh_token: refreshToken,\n                client_id: api.clientId,\n                client_secret: api.clientSecret,\n                grant_type: \"refresh_token\",\n                scope: (authScopes || []).join(\" \"),\n            },\n            logOptions: { skipRequestBody: true, skipQueryParams: true, skipResponseBody: true },\n        });\n        if (res.status === 401 || res.status === 400) {\n            return { access_token: refreshToken };\n        }\n        if (typeof ((_a = res.body) === null || _a === void 0 ? void 0 : _a.access_token) !== \"string\") {\n            throw invalidCredentialError();\n        }\n        lastAccessToken = Object.assign({\n            expires_at: Date.now() + res.body.expires_in * 1000,\n            refresh_token: refreshToken,\n            scopes: authScopes,\n        }, res.body);\n        const account = findAccountByRefreshToken(refreshToken);\n        if (account && lastAccessToken) {\n            account.tokens = lastAccessToken;\n            updateAccount(account);\n        }\n        return lastAccessToken;\n    }\n    catch (err) {\n        if (((_c = (_b = err === null || err === void 0 ? void 0 : err.context) === null || _b === void 0 ? void 0 : _b.body) === null || _c === void 0 ? void 0 : _c.error) === \"invalid_scope\") {\n            throw new error_1.FirebaseError(\"This command requires new authorization scopes not granted to your current session. Please run \" +\n                clc.bold(\"firebase login --reauth\") +\n                \"\\n\\n\" +\n                \"For CI servers and headless environments, generate a new token with \" +\n                clc.bold(\"firebase login:ci\"), { exit: 1 });\n        }\n        throw invalidCredentialError();\n    }\n}\nasync function getAccessToken(refreshToken, authScopes) {\n    if (haveValidTokens(refreshToken, authScopes)) {\n        return lastAccessToken;\n    }\n    return refreshTokens(refreshToken, authScopes);\n}\nexports.getAccessToken = getAccessToken;\nasync function logout(refreshToken) {\n    if ((lastAccessToken === null || lastAccessToken === void 0 ? void 0 : lastAccessToken.refresh_token) === refreshToken) {\n        lastAccessToken = undefined;\n    }\n    logoutCurrentSession(refreshToken);\n    try {\n        await api.request(\"GET\", \"/o/oauth2/revoke\", {\n            origin: api.authOrigin,\n            data: {\n                token: refreshToken,\n            },\n        });\n    }\n    catch (thrown) {\n        const err = thrown instanceof Error ? thrown : new Error(thrown);\n        throw new error_1.FirebaseError(\"Authentication Error.\", {\n            exit: 1,\n            original: err,\n        });\n    }\n}\nexports.logout = logout;\n"]},"metadata":{},"sourceType":"script"}