{"ast":null,"code":"import { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function sample(notifier) {\n  return operate(function (source, subscriber) {\n    var hasValue = false;\n    var lastValue = null;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      hasValue = true;\n      lastValue = value;\n    }));\n\n    var emit = function () {\n      if (hasValue) {\n        hasValue = false;\n        var value = lastValue;\n        lastValue = null;\n        subscriber.next(value);\n      }\n    };\n\n    notifier.subscribe(new OperatorSubscriber(subscriber, emit, noop));\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AAwCA,OAAM,SAAUC,MAAV,CAAoBC,QAApB,EAA6C;AACjD,SAAOJ,OAAO,CAAC,UAACK,MAAD,EAASC,UAAT,EAAmB;AAChC,QAAIC,QAAQ,GAAG,KAAf;AACA,QAAIC,SAAS,GAAa,IAA1B;AACAH,UAAM,CAACI,SAAP,CACE,IAAIP,kBAAJ,CAAuBI,UAAvB,EAAmC,UAACI,KAAD,EAAM;AACvCH,cAAQ,GAAG,IAAX;AACAC,eAAS,GAAGE,KAAZ;AACD,KAHD,CADF;;AAMA,QAAMC,IAAI,GAAG;AACX,UAAIJ,QAAJ,EAAc;AACZA,gBAAQ,GAAG,KAAX;AACA,YAAMG,KAAK,GAAGF,SAAd;AACAA,iBAAS,GAAG,IAAZ;AACAF,kBAAU,CAACM,IAAX,CAAgBF,KAAhB;AACD;AACF,KAPD;;AAQAN,YAAQ,CAACK,SAAT,CAAmB,IAAIP,kBAAJ,CAAuBI,UAAvB,EAAmCK,IAAnC,EAAyCV,IAAzC,CAAnB;AACD,GAlBa,CAAd;AAmBD","names":["operate","noop","OperatorSubscriber","sample","notifier","source","subscriber","hasValue","lastValue","subscribe","value","emit","next"],"sources":["C:\\Users\\DELL\\OneDrive\\Desktop\\React\\netflix-clone\\node_modules\\firebase-tools\\node_modules\\rxjs\\src\\internal\\operators\\sample.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * ![](sample.png)\n *\n * Whenever the `notifier` Observable emits a value, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * ## Example\n * On every click, sample the most recent \"seconds\" timer\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { sample } from 'rxjs/operators';\n *\n * const seconds = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = seconds.pipe(sample(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param notifier The Observable to use for sampling the\n * source Observable.\n * @return A function that returns an Observable that emits the results of\n * sampling the values emitted by the source Observable whenever the notifier\n * Observable emits value or completes.\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    let lastValue: T | null = null;\n    source.subscribe(\n      new OperatorSubscriber(subscriber, (value) => {\n        hasValue = true;\n        lastValue = value;\n      })\n    );\n    const emit = () => {\n      if (hasValue) {\n        hasValue = false;\n        const value = lastValue!;\n        lastValue = null;\n        subscriber.next(value);\n      }\n    };\n    notifier.subscribe(new OperatorSubscriber(subscriber, emit, noop));\n  });\n}\n"]},"metadata":{},"sourceType":"module"}