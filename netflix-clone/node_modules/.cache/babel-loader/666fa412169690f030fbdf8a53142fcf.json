{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst http_1 = __importDefault(require(\"http\"));\n\nconst https_1 = __importDefault(require(\"https\"));\n\nconst once_1 = __importDefault(require(\"@tootallnate/once\"));\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst url_1 = require(\"url\");\n\nconst http_error_1 = __importDefault(require(\"./http-error\"));\n\nconst notfound_1 = __importDefault(require(\"./notfound\"));\n\nconst notmodified_1 = __importDefault(require(\"./notmodified\"));\n\nconst debug = debug_1.default('get-uri:http');\n/**\n * Returns a Readable stream from an \"http:\" URI.\n */\n\nfunction get(parsed, opts) {\n  return __awaiter(this, void 0, void 0, function* () {\n    debug('GET %o', parsed.href);\n    const cache = getCache(parsed, opts.cache); // first check the previous Expires and/or Cache-Control headers\n    // of a previous response if a `cache` was provided\n\n    if (cache && isFresh(cache) && typeof cache.statusCode === 'number') {\n      // check for a 3xx \"redirect\" status code on the previous cache\n      const type = cache.statusCode / 100 | 0;\n\n      if (type === 3 && cache.headers.location) {\n        debug('cached redirect');\n        throw new Error('TODO: implement cached redirects!');\n      } // otherwise we assume that it's the destination endpoint,\n      // since there's nowhere else to redirect to\n\n\n      throw new notmodified_1.default();\n    } // 5 redirects allowed by default\n\n\n    const maxRedirects = typeof opts.maxRedirects === 'number' ? opts.maxRedirects : 5;\n    debug('allowing %o max redirects', maxRedirects);\n    let mod;\n\n    if (opts.http) {\n      // the `https` module passed in from the \"http.js\" file\n      mod = opts.http;\n      debug('using secure `https` core module');\n    } else {\n      mod = http_1.default;\n      debug('using `http` core module');\n    }\n\n    const options = Object.assign(Object.assign({}, opts), parsed); // add \"cache validation\" headers if a `cache` was provided\n\n    if (cache) {\n      if (!options.headers) {\n        options.headers = {};\n      }\n\n      const lastModified = cache.headers['last-modified'];\n\n      if (lastModified) {\n        options.headers['If-Modified-Since'] = lastModified;\n        debug('added \"If-Modified-Since\" request header: %o', lastModified);\n      }\n\n      const etag = cache.headers.etag;\n\n      if (etag) {\n        options.headers['If-None-Match'] = etag;\n        debug('added \"If-None-Match\" request header: %o', etag);\n      }\n    }\n\n    const req = mod.get(options);\n    const res = yield once_1.default(req, 'response');\n    const code = res.statusCode || 0; // assign a Date to this response for the \"Cache-Control\" delta calculation\n\n    res.date = Date.now();\n    res.parsed = parsed;\n    debug('got %o response status code', code); // any 2xx response is a \"success\" code\n\n    let type = code / 100 | 0; // check for a 3xx \"redirect\" status code\n\n    let location = res.headers.location;\n\n    if (type === 3 && location) {\n      if (!opts.redirects) opts.redirects = [];\n      let redirects = opts.redirects;\n\n      if (redirects.length < maxRedirects) {\n        debug('got a \"redirect\" status code with Location: %o', location); // flush this response - we're not going to use it\n\n        res.resume(); // hang on to this Response object for the \"redirects\" Array\n\n        redirects.push(res);\n        let newUri = url_1.resolve(parsed.href, location);\n        debug('resolved redirect URL: %o', newUri);\n        let left = maxRedirects - redirects.length;\n        debug('%o more redirects allowed after this one', left); // check if redirecting to a different protocol\n\n        let parsedUrl = url_1.parse(newUri);\n\n        if (parsedUrl.protocol !== parsed.protocol) {\n          opts.http = parsedUrl.protocol === 'https:' ? https_1.default : undefined;\n        }\n\n        return get(parsedUrl, opts);\n      }\n    } // if we didn't get a 2xx \"success\" status code, then create an Error object\n\n\n    if (type !== 2) {\n      res.resume();\n\n      if (code === 304) {\n        throw new notmodified_1.default();\n      } else if (code === 404) {\n        throw new notfound_1.default();\n      } // other HTTP-level error\n\n\n      throw new http_error_1.default(code);\n    }\n\n    if (opts.redirects) {\n      // store a reference to the \"redirects\" Array on the Response object so that\n      // they can be inspected during a subsequent call to GET the same URI\n      res.redirects = opts.redirects;\n    }\n\n    return res;\n  });\n}\n\nexports.default = get;\n/**\n * Returns `true` if the provided cache's \"freshness\" is valid. That is, either\n * the Cache-Control header or Expires header values are still within the allowed\n * time period.\n *\n * @return {Boolean}\n * @api private\n */\n\nfunction isFresh(cache) {\n  let fresh = false;\n  let expires = parseInt(cache.headers.expires || '', 10);\n  const cacheControl = cache.headers['cache-control'];\n\n  if (cacheControl) {\n    // for Cache-Control rules, see: http://www.mnot.net/cache_docs/#CACHE-CONTROL\n    debug('Cache-Control: %o', cacheControl);\n    const parts = cacheControl.split(/,\\s*?\\b/);\n\n    for (let i = 0; i < parts.length; i++) {\n      const part = parts[i];\n      const subparts = part.split('=');\n      const name = subparts[0];\n\n      switch (name) {\n        case 'max-age':\n          expires = (cache.date || 0) + parseInt(subparts[1], 10) * 1000;\n          fresh = Date.now() < expires;\n\n          if (fresh) {\n            debug('cache is \"fresh\" due to previous %o Cache-Control param', part);\n          }\n\n          return fresh;\n\n        case 'must-revalidate':\n          // XXX: what we supposed to do here?\n          break;\n\n        case 'no-cache':\n        case 'no-store':\n          debug('cache is \"stale\" due to explicit %o Cache-Control param', name);\n          return false;\n\n        default:\n          // ignore unknown cache value\n          break;\n      }\n    }\n  } else if (expires) {\n    // for Expires rules, see: http://www.mnot.net/cache_docs/#EXPIRES\n    debug('Expires: %o', expires);\n    fresh = Date.now() < expires;\n\n    if (fresh) {\n      debug('cache is \"fresh\" due to previous Expires response header');\n    }\n\n    return fresh;\n  }\n\n  return false;\n}\n/**\n * Attempts to return a previous Response object from a previous GET call to the\n * same URI.\n *\n * @api private\n */\n\n\nfunction getCache(parsed, cache) {\n  if (cache) {\n    if (cache.parsed && cache.parsed.href === parsed.href) {\n      return cache;\n    }\n\n    if (cache.redirects) {\n      for (let i = 0; i < cache.redirects.length; i++) {\n        const c = getCache(parsed, cache.redirects[i]);\n\n        if (c) {\n          return c;\n        }\n      }\n    }\n  }\n\n  return null;\n}","map":{"version":3,"mappings":"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","names":["debug","debug_1","get","parsed","opts","href","cache","getCache","isFresh","statusCode","type","headers","location","Error","notmodified_1","maxRedirects","mod","http","http_1","options","lastModified","etag","req","res","once_1","code","date","Date","now","redirects","length","resume","push","newUri","url_1","left","parsedUrl","protocol","https_1","undefined","notfound_1","http_error_1","exports","fresh","expires","parseInt","cacheControl","parts","split","i","part","subparts","name","c"],"sources":["../src/http.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}