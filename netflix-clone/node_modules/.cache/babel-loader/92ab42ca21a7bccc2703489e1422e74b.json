{"ast":null,"code":"import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function distinct(keySelector, flushes) {\n  return operate(function (source, subscriber) {\n    var distinctKeys = new Set();\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      var key = keySelector ? keySelector(value) : value;\n\n      if (!distinctKeys.has(key)) {\n        distinctKeys.add(key);\n        subscriber.next(value);\n      }\n    }));\n    flushes === null || flushes === void 0 ? void 0 : flushes.subscribe(new OperatorSubscriber(subscriber, function () {\n      return distinctKeys.clear();\n    }, noop));\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,IAAT,QAAqB,cAArB;AAqEA,OAAM,SAAUC,QAAV,CAAyBC,WAAzB,EAAwDC,OAAxD,EAAiF;AACrF,SAAOL,OAAO,CAAC,UAACM,MAAD,EAASC,UAAT,EAAmB;AAChC,QAAMC,YAAY,GAAG,IAAIC,GAAJ,EAArB;AACAH,UAAM,CAACI,SAAP,CACE,IAAIT,kBAAJ,CAAuBM,UAAvB,EAAmC,UAACI,KAAD,EAAM;AACvC,UAAMC,GAAG,GAAGR,WAAW,GAAGA,WAAW,CAACO,KAAD,CAAd,GAAwBA,KAA/C;;AACA,UAAI,CAACH,YAAY,CAACK,GAAb,CAAiBD,GAAjB,CAAL,EAA4B;AAC1BJ,oBAAY,CAACM,GAAb,CAAiBF,GAAjB;AACAL,kBAAU,CAACQ,IAAX,CAAgBJ,KAAhB;AACD;AACF,KAND,CADF;AAUAN,WAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEK,SAAT,CAAmB,IAAIT,kBAAJ,CAAuBM,UAAvB,EAAmC;AAAM,yBAAY,CAACS,KAAb;AAAoB,KAA7D,EAA+Dd,IAA/D,CAAnB;AACD,GAba,CAAd;AAcD","names":["operate","OperatorSubscriber","noop","distinct","keySelector","flushes","source","subscriber","distinctKeys","Set","subscribe","value","key","has","add","next","clear"],"sources":["C:\\Users\\DELL\\OneDrive\\Desktop\\React\\netflix-clone\\node_modules\\firebase-tools\\node_modules\\rxjs\\src\\internal\\operators\\distinct.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * ## Examples\n *\n * A simple example with numbers\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { distinct } from 'rxjs/operators';\n *\n * of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .pipe(\n *     distinct()\n *   )\n *   .subscribe(x => console.log(x));\n *\n * // Outputs\n * // 1\n * // 2\n * // 3\n * // 4\n * ```\n *\n * An example using a keySelector function\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { distinct } from 'rxjs/operators';\n *\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * of(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'}\n *   ).pipe(\n *     distinct((p: Person) => p.name)\n *   )\n *   .subscribe(x => console.log(x));\n *\n * // Outputs\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * ```\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return A function that returns an Observable that emits items from the\n * source Observable with distinct values.\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K, flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    const distinctKeys = new Set();\n    source.subscribe(\n      new OperatorSubscriber(subscriber, (value) => {\n        const key = keySelector ? keySelector(value) : value;\n        if (!distinctKeys.has(key)) {\n          distinctKeys.add(key);\n          subscriber.next(value);\n        }\n      })\n    );\n\n    flushes?.subscribe(new OperatorSubscriber(subscriber, () => distinctKeys.clear(), noop));\n  });\n}\n"]},"metadata":{},"sourceType":"module"}