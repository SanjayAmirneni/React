{"ast":null,"code":"'use strict';\n/**\n * `confirm` type prompt\n */\n\nconst _ = {\n  extend: require('lodash/extend'),\n  isBoolean: require('lodash/isBoolean')\n};\n\nconst chalk = require('chalk');\n\nconst {\n  take,\n  takeUntil\n} = require('rxjs/operators');\n\nconst Base = require('./base');\n\nconst observe = require('../utils/events');\n\nclass ConfirmPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n    let rawDefault = true;\n\n    _.extend(this.opt, {\n      filter(input) {\n        let value = rawDefault;\n\n        if (input != null && input !== '') {\n          value = /^y(es)?/i.test(input);\n        }\n\n        return value;\n      }\n\n    });\n\n    if (_.isBoolean(this.opt.default)) {\n      rawDefault = this.opt.default;\n    }\n\n    this.opt.default = rawDefault ? 'Y/n' : 'y/N';\n  }\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb   Callback when prompt is done\n   * @return {this}\n   */\n\n\n  _run(cb) {\n    this.done = cb; // Once user confirm (enter key)\n\n    const events = observe(this.rl);\n    events.keypress.pipe(takeUntil(events.line)).forEach(this.onKeypress.bind(this));\n    events.line.pipe(take(1)).forEach(this.onEnd.bind(this)); // Init\n\n    this.render();\n    return this;\n  }\n  /**\n   * Render the prompt to screen\n   * @return {ConfirmPrompt} self\n   */\n\n\n  render(answer) {\n    let message = this.getQuestion();\n\n    if (typeof answer === 'boolean') {\n      message += chalk.cyan(answer ? 'Yes' : 'No');\n    } else {\n      message += this.rl.line;\n    }\n\n    this.screen.render(message);\n    return this;\n  }\n  /**\n   * When user press `enter` key\n   */\n\n\n  onEnd(input) {\n    this.status = 'answered';\n    const output = this.opt.filter(input);\n    this.render(output);\n    this.screen.done();\n    this.done(output);\n  }\n  /**\n   * When user press a key\n   */\n\n\n  onKeypress() {\n    this.render();\n  }\n\n}\n\nmodule.exports = ConfirmPrompt;","map":{"version":3,"sources":["C:/Users/DELL/OneDrive/Desktop/React/netflix-clone/node_modules/firebase-tools/node_modules/inquirer/lib/prompts/confirm.js"],"names":["_","extend","require","isBoolean","chalk","take","takeUntil","Base","observe","ConfirmPrompt","constructor","questions","rl","answers","rawDefault","opt","filter","input","value","test","default","_run","cb","done","events","keypress","pipe","line","forEach","onKeypress","bind","onEnd","render","answer","message","getQuestion","cyan","screen","status","output","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * `confirm` type prompt\n */\n\nconst _ = {\n  extend: require('lodash/extend'),\n  isBoolean: require('lodash/isBoolean'),\n};\nconst chalk = require('chalk');\nconst { take, takeUntil } = require('rxjs/operators');\nconst Base = require('./base');\nconst observe = require('../utils/events');\n\nclass ConfirmPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    let rawDefault = true;\n\n    _.extend(this.opt, {\n      filter(input) {\n        let value = rawDefault;\n        if (input != null && input !== '') {\n          value = /^y(es)?/i.test(input);\n        }\n\n        return value;\n      },\n    });\n\n    if (_.isBoolean(this.opt.default)) {\n      rawDefault = this.opt.default;\n    }\n\n    this.opt.default = rawDefault ? 'Y/n' : 'y/N';\n  }\n\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb   Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    // Once user confirm (enter key)\n    const events = observe(this.rl);\n    events.keypress.pipe(takeUntil(events.line)).forEach(this.onKeypress.bind(this));\n\n    events.line.pipe(take(1)).forEach(this.onEnd.bind(this));\n\n    // Init\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {ConfirmPrompt} self\n   */\n\n  render(answer) {\n    let message = this.getQuestion();\n\n    if (typeof answer === 'boolean') {\n      message += chalk.cyan(answer ? 'Yes' : 'No');\n    } else {\n      message += this.rl.line;\n    }\n\n    this.screen.render(message);\n\n    return this;\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  onEnd(input) {\n    this.status = 'answered';\n\n    const output = this.opt.filter(input);\n    this.render(output);\n\n    this.screen.done();\n    this.done(output);\n  }\n\n  /**\n   * When user press a key\n   */\n\n  onKeypress() {\n    this.render();\n  }\n}\n\nmodule.exports = ConfirmPrompt;\n"]},"metadata":{},"sourceType":"script"}