{"ast":null,"code":"'use strict';\n/**\n * `rawlist` type prompt\n */\n\nconst _ = {\n  extend: require('lodash/extend'),\n  isNumber: require('lodash/isNumber'),\n  findIndex: require('lodash/findIndex')\n};\n\nconst chalk = require('chalk');\n\nconst {\n  map,\n  takeUntil\n} = require('rxjs/operators');\n\nconst Base = require('./base');\n\nconst Separator = require('../objects/separator');\n\nconst observe = require('../utils/events');\n\nconst Paginator = require('../utils/paginator');\n\nconst incrementListIndex = require('../utils/incrementListIndex');\n\nclass RawListPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    if (!this.opt.choices) {\n      this.throwParamError('choices');\n    }\n\n    this.opt.validChoices = this.opt.choices.filter(Separator.exclude);\n    this.selected = 0;\n    this.rawDefault = 0;\n\n    _.extend(this.opt, {\n      validate(val) {\n        return val != null;\n      }\n\n    });\n\n    const def = this.opt.default;\n\n    if (_.isNumber(def) && def >= 0 && def < this.opt.choices.realLength) {\n      this.selected = def;\n      this.rawDefault = def;\n    } else if (!_.isNumber(def) && def != null) {\n      const index = _.findIndex(this.opt.choices.realChoices, _ref => {\n        let {\n          value\n        } = _ref;\n        return value === def;\n      });\n\n      const safeIndex = Math.max(index, 0);\n      this.selected = safeIndex;\n      this.rawDefault = safeIndex;\n    } // Make sure no default is set (so it won't be printed)\n\n\n    this.opt.default = null;\n    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;\n    this.paginator = new Paginator(undefined, {\n      isInfinite: shouldLoop\n    });\n  }\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n\n  _run(cb) {\n    this.done = cb; // Once user confirm (enter key)\n\n    const events = observe(this.rl);\n    const submit = events.line.pipe(map(this.getCurrentValue.bind(this)));\n    const validation = this.handleSubmitEvents(submit);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n    events.normalizedUpKey.pipe(takeUntil(validation.success)).forEach(this.onUpKey.bind(this));\n    events.normalizedDownKey.pipe(takeUntil(validation.success)).forEach(this.onDownKey.bind(this));\n    events.keypress.pipe(takeUntil(validation.success)).forEach(this.onKeypress.bind(this)); // Init the prompt\n\n    this.render();\n    return this;\n  }\n  /**\n   * Render the prompt to screen\n   * @return {RawListPrompt} self\n   */\n\n\n  render(error) {\n    // Render question\n    let message = this.getQuestion();\n    let bottomContent = '';\n\n    if (this.status === 'answered') {\n      message += chalk.cyan(this.opt.choices.getChoice(this.selected).short);\n    } else {\n      const choicesStr = renderChoices(this.opt.choices, this.selected);\n      message += '\\n' + this.paginator.paginate(choicesStr, this.selected, this.opt.pageSize);\n      message += '\\n  Answer: ';\n    }\n\n    message += this.rl.line;\n\n    if (error) {\n      bottomContent = '\\n' + chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n  /**\n   * When user press `enter` key\n   */\n\n\n  getCurrentValue(index) {\n    if (index == null) {\n      index = this.rawDefault;\n    } else if (index === '') {\n      this.selected = this.selected === undefined ? -1 : this.selected;\n      index = this.selected;\n    } else {\n      index -= 1;\n    }\n\n    const choice = this.opt.choices.getChoice(index);\n    return choice ? choice.value : null;\n  }\n\n  onEnd(state) {\n    this.status = 'answered';\n    this.answer = state.value; // Re-render prompt\n\n    this.render();\n    this.screen.done();\n    this.done(state.value);\n  }\n\n  onError() {\n    this.render('Please enter a valid index');\n  }\n  /**\n   * When user press a key\n   */\n\n\n  onKeypress() {\n    const index = this.rl.line.length ? Number(this.rl.line) - 1 : 0;\n\n    if (this.opt.choices.getChoice(index)) {\n      this.selected = index;\n    } else {\n      this.selected = undefined;\n    }\n\n    this.render();\n  }\n  /**\n   * When user press up key\n   */\n\n\n  onUpKey() {\n    this.onArrowKey('up');\n  }\n  /**\n   * When user press down key\n   */\n\n\n  onDownKey() {\n    this.onArrowKey('down');\n  }\n  /**\n   * When user press up or down key\n   * @param {String} type Arrow type: up or down\n   */\n\n\n  onArrowKey(type) {\n    this.selected = incrementListIndex(this.selected, type, this.opt);\n    this.rl.line = String(this.selected + 1);\n  }\n\n}\n/**\n * Function for rendering list choices\n * @param  {Number} pointer Position of the pointer\n * @return {String}         Rendered content\n */\n\n\nfunction renderChoices(choices, pointer) {\n  let output = '';\n  let separatorOffset = 0;\n  choices.forEach((choice, i) => {\n    output += '\\n  ';\n\n    if (choice.type === 'separator') {\n      separatorOffset++;\n      output += ' ' + choice;\n      return;\n    }\n\n    const index = i - separatorOffset;\n    let display = index + 1 + ') ' + choice.name;\n\n    if (index === pointer) {\n      display = chalk.cyan(display);\n    }\n\n    output += display;\n  });\n  return output;\n}\n\nmodule.exports = RawListPrompt;","map":{"version":3,"sources":["C:/Users/DELL/OneDrive/Desktop/React/netflix-clone/node_modules/firebase-tools/node_modules/inquirer/lib/prompts/rawlist.js"],"names":["_","extend","require","isNumber","findIndex","chalk","map","takeUntil","Base","Separator","observe","Paginator","incrementListIndex","RawListPrompt","constructor","questions","rl","answers","opt","choices","throwParamError","validChoices","filter","exclude","selected","rawDefault","validate","val","def","default","realLength","index","realChoices","value","safeIndex","Math","max","shouldLoop","loop","undefined","paginator","isInfinite","_run","cb","done","events","submit","line","pipe","getCurrentValue","bind","validation","handleSubmitEvents","success","forEach","onEnd","error","onError","normalizedUpKey","onUpKey","normalizedDownKey","onDownKey","keypress","onKeypress","render","message","getQuestion","bottomContent","status","cyan","getChoice","short","choicesStr","renderChoices","paginate","pageSize","red","screen","choice","state","answer","length","Number","onArrowKey","type","String","pointer","output","separatorOffset","i","display","name","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * `rawlist` type prompt\n */\n\nconst _ = {\n  extend: require('lodash/extend'),\n  isNumber: require('lodash/isNumber'),\n  findIndex: require('lodash/findIndex'),\n};\nconst chalk = require('chalk');\nconst { map, takeUntil } = require('rxjs/operators');\nconst Base = require('./base');\nconst Separator = require('../objects/separator');\nconst observe = require('../utils/events');\nconst Paginator = require('../utils/paginator');\nconst incrementListIndex = require('../utils/incrementListIndex');\n\nclass RawListPrompt extends Base {\n  constructor(questions, rl, answers) {\n    super(questions, rl, answers);\n\n    if (!this.opt.choices) {\n      this.throwParamError('choices');\n    }\n\n    this.opt.validChoices = this.opt.choices.filter(Separator.exclude);\n\n    this.selected = 0;\n    this.rawDefault = 0;\n\n    _.extend(this.opt, {\n      validate(val) {\n        return val != null;\n      },\n    });\n\n    const def = this.opt.default;\n    if (_.isNumber(def) && def >= 0 && def < this.opt.choices.realLength) {\n      this.selected = def;\n      this.rawDefault = def;\n    } else if (!_.isNumber(def) && def != null) {\n      const index = _.findIndex(\n        this.opt.choices.realChoices,\n        ({ value }) => value === def\n      );\n      const safeIndex = Math.max(index, 0);\n      this.selected = safeIndex;\n      this.rawDefault = safeIndex;\n    }\n\n    // Make sure no default is set (so it won't be printed)\n    this.opt.default = null;\n\n    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;\n    this.paginator = new Paginator(undefined, { isInfinite: shouldLoop });\n  }\n\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    // Once user confirm (enter key)\n    const events = observe(this.rl);\n    const submit = events.line.pipe(map(this.getCurrentValue.bind(this)));\n\n    const validation = this.handleSubmitEvents(submit);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n\n    events.normalizedUpKey\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onUpKey.bind(this));\n    events.normalizedDownKey\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onDownKey.bind(this));\n    events.keypress\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onKeypress.bind(this));\n    // Init the prompt\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {RawListPrompt} self\n   */\n\n  render(error) {\n    // Render question\n    let message = this.getQuestion();\n    let bottomContent = '';\n\n    if (this.status === 'answered') {\n      message += chalk.cyan(this.opt.choices.getChoice(this.selected).short);\n    } else {\n      const choicesStr = renderChoices(this.opt.choices, this.selected);\n      message +=\n        '\\n' + this.paginator.paginate(choicesStr, this.selected, this.opt.pageSize);\n      message += '\\n  Answer: ';\n    }\n    message += this.rl.line;\n\n    if (error) {\n      bottomContent = '\\n' + chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  getCurrentValue(index) {\n    if (index == null) {\n      index = this.rawDefault;\n    } else if (index === '') {\n      this.selected = this.selected === undefined ? -1 : this.selected;\n      index = this.selected;\n    } else {\n      index -= 1;\n    }\n\n    const choice = this.opt.choices.getChoice(index);\n    return choice ? choice.value : null;\n  }\n\n  onEnd(state) {\n    this.status = 'answered';\n    this.answer = state.value;\n\n    // Re-render prompt\n    this.render();\n\n    this.screen.done();\n    this.done(state.value);\n  }\n\n  onError() {\n    this.render('Please enter a valid index');\n  }\n\n  /**\n   * When user press a key\n   */\n\n  onKeypress() {\n    const index = this.rl.line.length ? Number(this.rl.line) - 1 : 0;\n\n    if (this.opt.choices.getChoice(index)) {\n      this.selected = index;\n    } else {\n      this.selected = undefined;\n    }\n    this.render();\n  }\n\n  /**\n   * When user press up key\n   */\n\n  onUpKey() {\n    this.onArrowKey('up');\n  }\n\n  /**\n   * When user press down key\n   */\n\n  onDownKey() {\n    this.onArrowKey('down');\n  }\n\n  /**\n   * When user press up or down key\n   * @param {String} type Arrow type: up or down\n   */\n\n  onArrowKey(type) {\n    this.selected = incrementListIndex(this.selected, type, this.opt);\n    this.rl.line = String(this.selected + 1);\n  }\n}\n\n/**\n * Function for rendering list choices\n * @param  {Number} pointer Position of the pointer\n * @return {String}         Rendered content\n */\n\nfunction renderChoices(choices, pointer) {\n  let output = '';\n  let separatorOffset = 0;\n\n  choices.forEach((choice, i) => {\n    output += '\\n  ';\n\n    if (choice.type === 'separator') {\n      separatorOffset++;\n      output += ' ' + choice;\n      return;\n    }\n\n    const index = i - separatorOffset;\n    let display = index + 1 + ') ' + choice.name;\n    if (index === pointer) {\n      display = chalk.cyan(display);\n    }\n\n    output += display;\n  });\n\n  return output;\n}\n\nmodule.exports = RawListPrompt;\n"]},"metadata":{},"sourceType":"script"}