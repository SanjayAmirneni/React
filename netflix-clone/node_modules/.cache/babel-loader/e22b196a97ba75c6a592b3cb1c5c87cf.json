{"ast":null,"code":"import { async } from '../scheduler/async';\nimport { scan } from './scan';\nimport { defer } from '../observable/defer';\nimport { map } from './map';\nexport function timeInterval(scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async;\n  }\n\n  return function (source) {\n    return defer(function () {\n      return source.pipe(scan(function (_a, value) {\n        var current = _a.current;\n        return {\n          value: value,\n          current: scheduler.now(),\n          last: current\n        };\n      }, {\n        current: scheduler.now(),\n        value: undefined,\n        last: undefined\n      }), map(function (_a) {\n        var current = _a.current,\n            last = _a.last,\n            value = _a.value;\n        return new TimeInterval(value, current - last);\n      }));\n    });\n  };\n}\n\nvar TimeInterval = function () {\n  function TimeInterval(value, interval) {\n    this.value = value;\n    this.interval = interval;\n  }\n\n  return TimeInterval;\n}();\n\nexport { TimeInterval };","map":{"version":3,"mappings":"AACA,SAASA,KAAT,QAAsB,oBAAtB;AAEA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,SAASC,GAAT,QAAoB,OAApB;AAkDA,OAAM,SAAUC,YAAV,CAA0BC,SAA1B,EAA0D;AAAhC;AAAAA;AAAgC;;AAC9D,SAAO,UAACC,MAAD,EAAsB;AAC3B,gBAAK,CAAC;AACJ,aAAOA,MAAM,CAACC,IAAP,CAELN,IAAI,CAAC,UAACO,EAAD,EAAcC,KAAd,EAAmB;YAAhBC,OAAO;AAAc,eAAC;AAAED,eAAK,OAAP;AAASC,iBAAO,EAAEL,SAAS,CAACM,GAAV,EAAlB;AAAmCC,cAAI,EAAEF;AAAzC,SAAD;AAAoD,OAA7E,EAA+E;AACjFA,eAAO,EAAEL,SAAS,CAACM,GAAV,EADwE;AAEjFF,aAAK,EAAEI,SAF0E;AAGjFD,YAAI,EAAEC;AAH2E,OAA/E,CAFC,EAOLV,GAAG,CAAuB,UAACK,EAAD,EAAyB;YAAtBE,OAAO;YAAEE,IAAI;YAAEH,KAAK;AAAO,mBAAIK,YAAJ,CAAiBL,KAAjB,EAAwBC,OAAO,GAAGE,IAAlC;AAAuC,OAA5F,CAPE,CAAP;AASD,KAVI,CAAL;AAUE,GAXJ;AAYD;;AAKD;AAIE,wBAAmBH,KAAnB,EAAoCM,QAApC,EAAoD;AAAjC;AAAiB;AAAoB;;AAC1D;AAAC,CALD","names":["async","scan","defer","map","timeInterval","scheduler","source","pipe","_a","value","current","now","last","undefined","TimeInterval","interval"],"sources":["C:\\Users\\DELL\\OneDrive\\Desktop\\React\\netflix-clone\\node_modules\\firebase-tools\\node_modules\\rxjs\\src\\internal\\operators\\timeInterval.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { SchedulerLike, OperatorFunction } from '../types';\nimport { scan } from './scan';\nimport { defer } from '../observable/defer';\nimport { map } from './map';\n\n/**\n *\n * Emits an object containing the current value, and the time that has\n * passed between emitting the current value and the previous value, which is\n * calculated by using the provided `scheduler`'s `now()` method to retrieve\n * the current time at each emission, then calculating the difference. The `scheduler`\n * defaults to {@link asyncScheduler}, so by default, the `interval` will be in\n * milliseconds.\n *\n * <span class=\"informal\">Convert an Observable that emits items into one that\n * emits indications of the amount of time elapsed between those emissions.</span>\n *\n * ![](timeInterval.png)\n *\n * ## Examples\n * Emit interval between current value with the last value\n *\n * ```ts\n * import { interval } from \"rxjs\";\n * import { timeInterval, timeout } from \"rxjs/operators\";\n *\n * const seconds = interval(1000);\n *\n * seconds.pipe(timeInterval())\n * .subscribe({\n *     next: value => console.log(value),\n *     error: err => console.log(err),\n * });\n *\n * seconds.pipe(timeout(900))\n * .subscribe({\n *     next: value => console.log(value),\n *     error: err => console.log(err),\n * });\n *\n * // NOTE: The values will never be this precise,\n * // intervals created with `interval` or `setInterval`\n * // are non-deterministic.\n *\n * // {value: 0, interval: 1000}\n * // {value: 1, interval: 1000}\n * // {value: 2, interval: 1000}\n * ```\n *\n * @param {SchedulerLike} [scheduler] Scheduler used to get the current time.\n * @return A function that returns an Observable that emits information about\n * value and interval.\n */\nexport function timeInterval<T>(scheduler: SchedulerLike = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) =>\n    defer(() => {\n      return source.pipe(\n        // TODO(benlesh): correct these typings.\n        scan(({ current }, value) => ({ value, current: scheduler.now(), last: current }), {\n          current: scheduler.now(),\n          value: undefined,\n          last: undefined,\n        } as any) as OperatorFunction<T, any>,\n        map<any, TimeInterval<T>>(({ current, last, value }) => new TimeInterval(value, current - last))\n      );\n    });\n}\n\n// TODO(benlesh): make this an interface, export the interface, but not the implemented class,\n// there's no reason users should be manually creating this type.\n\nexport class TimeInterval<T> {\n  /**\n   * @deprecated Internal implementation detail, do not construct directly. Will be made an interface in v8.\n   */\n  constructor(public value: T, public interval: number) {}\n}\n"]},"metadata":{},"sourceType":"module"}