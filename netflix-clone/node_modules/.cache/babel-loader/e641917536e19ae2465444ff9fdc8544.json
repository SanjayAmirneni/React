{"ast":null,"code":"'use strict';\n\nconst _ = {\n  extend: require('lodash/extend'),\n  omit: require('lodash/omit')\n};\n\nconst MuteStream = require('mute-stream');\n\nconst readline = require('readline');\n/**\n * Base interface class other can inherits from\n */\n\n\nclass UI {\n  constructor(opt) {\n    // Instantiate the Readline interface\n    // @Note: Don't reassign if already present (allow test to override the Stream)\n    if (!this.rl) {\n      this.rl = readline.createInterface(setupReadlineOptions(opt));\n    }\n\n    this.rl.resume();\n    this.onForceClose = this.onForceClose.bind(this); // Make sure new prompt start on a newline when closing\n\n    process.on('exit', this.onForceClose); // Terminate process on SIGINT (which will call process.on('exit') in return)\n\n    this.rl.on('SIGINT', this.onForceClose);\n  }\n  /**\n   * Handle the ^C exit\n   * @return {null}\n   */\n\n\n  onForceClose() {\n    this.close();\n    process.kill(process.pid, 'SIGINT');\n    console.log('');\n  }\n  /**\n   * Close the interface and cleanup listeners\n   */\n\n\n  close() {\n    // Remove events listeners\n    this.rl.removeListener('SIGINT', this.onForceClose);\n    process.removeListener('exit', this.onForceClose);\n    this.rl.output.unmute();\n\n    if (this.activePrompt && typeof this.activePrompt.close === 'function') {\n      this.activePrompt.close();\n    } // Close the readline\n\n\n    this.rl.output.end();\n    this.rl.pause();\n    this.rl.close();\n  }\n\n}\n\nfunction setupReadlineOptions(opt) {\n  opt = opt || {}; // Inquirer 8.x:\n  // opt.skipTTYChecks = opt.skipTTYChecks === undefined ? opt.input !== undefined : opt.skipTTYChecks;\n\n  opt.skipTTYChecks = opt.skipTTYChecks === undefined ? true : opt.skipTTYChecks; // Default `input` to stdin\n\n  const input = opt.input || process.stdin; // Check if prompt is being called in TTY environment\n  // If it isn't return a failed promise\n\n  if (!opt.skipTTYChecks && !input.isTTY) {\n    const nonTtyError = new Error('Prompts can not be meaningfully rendered in non-TTY environments');\n    nonTtyError.isTtyError = true;\n    throw nonTtyError;\n  } // Add mute capabilities to the output\n\n\n  const ms = new MuteStream();\n  ms.pipe(opt.output || process.stdout);\n  const output = ms;\n  return _.extend({\n    terminal: true,\n    input,\n    output\n  }, _.omit(opt, ['input', 'output']));\n}\n\nmodule.exports = UI;","map":{"version":3,"sources":["C:/Users/DELL/OneDrive/Desktop/React/netflix-clone/node_modules/firebase-tools/node_modules/inquirer/lib/ui/baseUI.js"],"names":["_","extend","require","omit","MuteStream","readline","UI","constructor","opt","rl","createInterface","setupReadlineOptions","resume","onForceClose","bind","process","on","close","kill","pid","console","log","removeListener","output","unmute","activePrompt","end","pause","skipTTYChecks","undefined","input","stdin","isTTY","nonTtyError","Error","isTtyError","ms","pipe","stdout","terminal","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst _ = {\n  extend: require('lodash/extend'),\n  omit: require('lodash/omit'),\n};\nconst MuteStream = require('mute-stream');\nconst readline = require('readline');\n\n/**\n * Base interface class other can inherits from\n */\n\nclass UI {\n  constructor(opt) {\n    // Instantiate the Readline interface\n    // @Note: Don't reassign if already present (allow test to override the Stream)\n    if (!this.rl) {\n      this.rl = readline.createInterface(setupReadlineOptions(opt));\n    }\n\n    this.rl.resume();\n\n    this.onForceClose = this.onForceClose.bind(this);\n\n    // Make sure new prompt start on a newline when closing\n    process.on('exit', this.onForceClose);\n\n    // Terminate process on SIGINT (which will call process.on('exit') in return)\n    this.rl.on('SIGINT', this.onForceClose);\n  }\n\n  /**\n   * Handle the ^C exit\n   * @return {null}\n   */\n\n  onForceClose() {\n    this.close();\n    process.kill(process.pid, 'SIGINT');\n    console.log('');\n  }\n\n  /**\n   * Close the interface and cleanup listeners\n   */\n\n  close() {\n    // Remove events listeners\n    this.rl.removeListener('SIGINT', this.onForceClose);\n    process.removeListener('exit', this.onForceClose);\n\n    this.rl.output.unmute();\n\n    if (this.activePrompt && typeof this.activePrompt.close === 'function') {\n      this.activePrompt.close();\n    }\n\n    // Close the readline\n    this.rl.output.end();\n    this.rl.pause();\n    this.rl.close();\n  }\n}\n\nfunction setupReadlineOptions(opt) {\n  opt = opt || {};\n  // Inquirer 8.x:\n  // opt.skipTTYChecks = opt.skipTTYChecks === undefined ? opt.input !== undefined : opt.skipTTYChecks;\n  opt.skipTTYChecks = opt.skipTTYChecks === undefined ? true : opt.skipTTYChecks;\n\n  // Default `input` to stdin\n  const input = opt.input || process.stdin;\n\n  // Check if prompt is being called in TTY environment\n  // If it isn't return a failed promise\n  if (!opt.skipTTYChecks && !input.isTTY) {\n    const nonTtyError = new Error(\n      'Prompts can not be meaningfully rendered in non-TTY environments'\n    );\n    nonTtyError.isTtyError = true;\n    throw nonTtyError;\n  }\n\n  // Add mute capabilities to the output\n  const ms = new MuteStream();\n  ms.pipe(opt.output || process.stdout);\n  const output = ms;\n\n  return _.extend(\n    {\n      terminal: true,\n      input,\n      output,\n    },\n    _.omit(opt, ['input', 'output'])\n  );\n}\n\nmodule.exports = UI;\n"]},"metadata":{},"sourceType":"script"}