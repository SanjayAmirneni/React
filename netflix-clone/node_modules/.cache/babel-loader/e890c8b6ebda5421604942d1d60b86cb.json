{"ast":null,"code":"'use strict';\n/**\n * Sticky bottom bar user interface\n */\n\nconst through = require('through');\n\nconst Base = require('./baseUI');\n\nconst rlUtils = require('../utils/readline');\n\nconst _ = {\n  last: require('lodash/last')\n};\n\nclass BottomBar extends Base {\n  constructor(opt) {\n    opt = opt || {};\n    super(opt);\n    this.log = through(this.writeLog.bind(this));\n    this.bottomBar = opt.bottomBar || '';\n    this.render();\n  }\n  /**\n   * Render the prompt to screen\n   * @return {BottomBar} self\n   */\n\n\n  render() {\n    this.write(this.bottomBar);\n    return this;\n  }\n\n  clean() {\n    rlUtils.clearLine(this.rl, this.bottomBar.split('\\n').length);\n    return this;\n  }\n  /**\n   * Update the bottom bar content and rerender\n   * @param  {String} bottomBar Bottom bar content\n   * @return {BottomBar}           self\n   */\n\n\n  updateBottomBar(bottomBar) {\n    rlUtils.clearLine(this.rl, 1);\n    this.rl.output.unmute();\n    this.clean();\n    this.bottomBar = bottomBar;\n    this.render();\n    this.rl.output.mute();\n    return this;\n  }\n  /**\n   * Write out log data\n   * @param {String} data - The log data to be output\n   * @return {BottomBar} self\n   */\n\n\n  writeLog(data) {\n    this.rl.output.unmute();\n    this.clean();\n    this.rl.output.write(this.enforceLF(data.toString()));\n    this.render();\n    this.rl.output.mute();\n    return this;\n  }\n  /**\n   * Make sure line end on a line feed\n   * @param  {String} str Input string\n   * @return {String}     The input string with a final line feed\n   */\n\n\n  enforceLF(str) {\n    return str.match(/[\\r\\n]$/) ? str : str + '\\n';\n  }\n  /**\n   * Helper for writing message in Prompt\n   * @param {BottomBar} prompt  - The Prompt object that extends tty\n   * @param {String} message - The message to be output\n   */\n\n\n  write(message) {\n    const msgLines = message.split(/\\n/);\n    this.height = msgLines.length; // Write message to screen and setPrompt to control backspace\n\n    this.rl.setPrompt(_.last(msgLines));\n\n    if (this.rl.output.rows === 0 && this.rl.output.columns === 0) {\n      /* When it's a tty through serial port there's no terminal info and the render will malfunction,\n         so we need enforce the cursor to locate to the leftmost position for rendering. */\n      rlUtils.left(this.rl, message.length + this.rl.line.length);\n    }\n\n    this.rl.output.write(message);\n  }\n\n}\n\nmodule.exports = BottomBar;","map":{"version":3,"sources":["C:/Users/DELL/OneDrive/Desktop/React/netflix-clone/node_modules/firebase-tools/node_modules/inquirer/lib/ui/bottom-bar.js"],"names":["through","require","Base","rlUtils","_","last","BottomBar","constructor","opt","log","writeLog","bind","bottomBar","render","write","clean","clearLine","rl","split","length","updateBottomBar","output","unmute","mute","data","enforceLF","toString","str","match","message","msgLines","height","setPrompt","rows","columns","left","line","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * Sticky bottom bar user interface\n */\n\nconst through = require('through');\nconst Base = require('./baseUI');\nconst rlUtils = require('../utils/readline');\nconst _ = {\n  last: require('lodash/last'),\n};\n\nclass BottomBar extends Base {\n  constructor(opt) {\n    opt = opt || {};\n\n    super(opt);\n\n    this.log = through(this.writeLog.bind(this));\n    this.bottomBar = opt.bottomBar || '';\n    this.render();\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {BottomBar} self\n   */\n\n  render() {\n    this.write(this.bottomBar);\n    return this;\n  }\n\n  clean() {\n    rlUtils.clearLine(this.rl, this.bottomBar.split('\\n').length);\n    return this;\n  }\n\n  /**\n   * Update the bottom bar content and rerender\n   * @param  {String} bottomBar Bottom bar content\n   * @return {BottomBar}           self\n   */\n\n  updateBottomBar(bottomBar) {\n    rlUtils.clearLine(this.rl, 1);\n    this.rl.output.unmute();\n    this.clean();\n    this.bottomBar = bottomBar;\n    this.render();\n    this.rl.output.mute();\n    return this;\n  }\n\n  /**\n   * Write out log data\n   * @param {String} data - The log data to be output\n   * @return {BottomBar} self\n   */\n\n  writeLog(data) {\n    this.rl.output.unmute();\n    this.clean();\n    this.rl.output.write(this.enforceLF(data.toString()));\n    this.render();\n    this.rl.output.mute();\n    return this;\n  }\n\n  /**\n   * Make sure line end on a line feed\n   * @param  {String} str Input string\n   * @return {String}     The input string with a final line feed\n   */\n\n  enforceLF(str) {\n    return str.match(/[\\r\\n]$/) ? str : str + '\\n';\n  }\n\n  /**\n   * Helper for writing message in Prompt\n   * @param {BottomBar} prompt  - The Prompt object that extends tty\n   * @param {String} message - The message to be output\n   */\n  write(message) {\n    const msgLines = message.split(/\\n/);\n    this.height = msgLines.length;\n\n    // Write message to screen and setPrompt to control backspace\n    this.rl.setPrompt(_.last(msgLines));\n\n    if (this.rl.output.rows === 0 && this.rl.output.columns === 0) {\n      /* When it's a tty through serial port there's no terminal info and the render will malfunction,\n         so we need enforce the cursor to locate to the leftmost position for rendering. */\n      rlUtils.left(this.rl, message.length + this.rl.line.length);\n    }\n\n    this.rl.output.write(message);\n  }\n}\n\nmodule.exports = BottomBar;\n"]},"metadata":{},"sourceType":"script"}