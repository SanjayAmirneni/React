{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n\nvar OperatorSubscriber = function (_super) {\n  __extends(OperatorSubscriber, _super);\n\n  function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.onFinalize = onFinalize;\n    _this._next = onNext ? function (value) {\n      try {\n        onNext(value);\n      } catch (err) {\n        destination.error(err);\n      }\n    } : _super.prototype._next;\n    _this._error = onError ? function (err) {\n      try {\n        onError(err);\n      } catch (err) {\n        destination.error(err);\n      } finally {\n        this.unsubscribe();\n      }\n    } : _super.prototype._error;\n    _this._complete = onComplete ? function () {\n      try {\n        onComplete();\n      } catch (err) {\n        destination.error(err);\n      } finally {\n        this.unsubscribe();\n      }\n    } : _super.prototype._complete;\n    return _this;\n  }\n\n  OperatorSubscriber.prototype.unsubscribe = function () {\n    var _a;\n\n    var closed = this.closed;\n\n    _super.prototype.unsubscribe.call(this);\n\n    !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));\n  };\n\n  return OperatorSubscriber;\n}(Subscriber);\n\nexport { OperatorSubscriber };","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,QAA2B,eAA3B;;AAMA;AAA2CC;;AAazC,8BACEC,WADF,EAEEC,MAFF,EAGEC,UAHF,EAIEC,OAJF,EAKUC,UALV,EAKiC;AALjC,gBAmBEC,kBAAML,WAAN,KAAkB,IAnBpB;;AAKUM;AAeRA,SAAI,CAACC,KAAL,GAAaN,MAAM,GACf,UAAuCO,KAAvC,EAA+C;AAC7C,UAAI;AACFP,cAAM,CAACO,KAAD,CAAN;AACD,OAFD,CAEE,OAAOC,GAAP,EAAY;AACZT,mBAAW,CAACU,KAAZ,CAAkBD,GAAlB;AACD;AACF,KAPc,GAQfJ,iBAAME,KARV;AASAD,SAAI,CAACK,MAAL,GAAcR,OAAO,GACjB,UAAuCM,GAAvC,EAA+C;AAC7C,UAAI;AACFN,eAAO,CAACM,GAAD,CAAP;AACD,OAFD,CAEE,OAAOA,GAAP,EAAY;AAEZT,mBAAW,CAACU,KAAZ,CAAkBD,GAAlB;AACD,OALD,SAKU;AAER,aAAKG,WAAL;AACD;AACF,KAXgB,GAYjBP,iBAAMM,MAZV;AAaAL,SAAI,CAACO,SAAL,GAAiBX,UAAU,GACvB;AACE,UAAI;AACFA,kBAAU;AACX,OAFD,CAEE,OAAOO,GAAP,EAAY;AAEZT,mBAAW,CAACU,KAAZ,CAAkBD,GAAlB;AACD,OALD,SAKU;AAER,aAAKG,WAAL;AACD;AACF,KAXsB,GAYvBP,iBAAMQ,SAZV;;AAaD;;AAEDC;;;AACU,cAAM,GAAK,KAAIC,MAAf;;AACRV,qBAAMO,WAAN,CAAiBI,IAAjB,CAAiB,IAAjB;;AAEA,KAACD,MAAD,KAAW,WAAKX,UAAL,MAAe,IAAf,IAAea,aAAf,GAAe,MAAf,GAAeA,QAAf,IAAe,CAA1B;AACD,GALD;;AAMF;AA5EA,EAA2CnB,UAA3C","names":["Subscriber","__extends","destination","onNext","onComplete","onError","onFinalize","_super","_this","_next","value","err","error","_error","unsubscribe","_complete","OperatorSubscriber","closed","call","_a"],"sources":["C:\\Users\\DELL\\OneDrive\\Desktop\\React\\netflix-clone\\node_modules\\firebase-tools\\node_modules\\rxjs\\src\\internal\\operators\\OperatorSubscriber.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\n\n/**\n * A generic helper for allowing operators to be created with a Subscriber and\n * use closures to capture necessary state from the operator function itself.\n */\nexport class OperatorSubscriber<T> extends Subscriber<T> {\n  /**\n   * Creates an instance of an `OperatorSubscriber`.\n   * @param destination The downstream subscriber.\n   * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n   * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n   * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n   * and send to the `destination` error handler.\n   * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n   * this handler are sent to the `destination` error handler.\n   * @param onFinalize Additional teardown logic here. This will only be called on teardown if the\n   * subscriber itself is not already closed. This is called after all other teardown logic is executed.\n   */\n  constructor(\n    destination: Subscriber<any>,\n    onNext?: (value: T) => void,\n    onComplete?: () => void,\n    onError?: (err: any) => void,\n    private onFinalize?: () => void\n  ) {\n    // It's important - for performance reasons - that all of this class's\n    // members are initialized and that they are always initialized in the same\n    // order. This will ensure that all OperatorSubscriber instances have the\n    // same hidden class in V8. This, in turn, will help keep the number of\n    // hidden classes involved in property accesses within the base class as\n    // low as possible. If the number of hidden classes involved exceeds four,\n    // the property accesses will become megamorphic and performance penalties\n    // will be incurred - i.e. inline caches won't be used.\n    //\n    // The reasons for ensuring all instances have the same hidden class are\n    // further discussed in this blog post from Benedikt Meurer:\n    // https://benediktmeurer.de/2018/03/23/impact-of-polymorphism-on-component-based-frameworks-like-react/\n    super(destination);\n    this._next = onNext\n      ? function (this: OperatorSubscriber<T>, value: T) {\n          try {\n            onNext(value);\n          } catch (err) {\n            destination.error(err);\n          }\n        }\n      : super._next;\n    this._error = onError\n      ? function (this: OperatorSubscriber<T>, err: any) {\n          try {\n            onError(err);\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure teardown.\n            this.unsubscribe();\n          }\n        }\n      : super._error;\n    this._complete = onComplete\n      ? function (this: OperatorSubscriber<T>) {\n          try {\n            onComplete();\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure teardown.\n            this.unsubscribe();\n          }\n        }\n      : super._complete;\n  }\n\n  unsubscribe() {\n    const { closed } = this;\n    super.unsubscribe();\n    // Execute additional teardown if we have any and we didn't already do so.\n    !closed && this.onFinalize?.();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}